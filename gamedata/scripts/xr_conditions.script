--[[ ----------------------------------------------------------------------------------------------
 File       : xr_conditions.script
 Description: common preconditions for logic
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Editors    : Karlan
--]] ----------------------------------------------------------------------------------------------

--[[
Karlan->ALL: я зарезал прокси, так как мне он нафиг не нужен, и в оригиналах он тоже нафиг не нужен, так как 
в 100% случаев применяются игровые методы и сервер тут нафиг не уперся, если кому-то ни жить ни быть 
понадобится сервер, то с проксями опять без понту возится, проще напрямую серверного актора пробросить (если удастся) в 
серверных методах один фиг сейчас там падает клиентский, и в некоторых случаях его собственно нифига и нет, поэтому 
падает там всегда nil сейчас

серверный функционал безбожно скуден, и если там что и проверять, то только инфо, а на кой черт нужны эти инфо нужны
данный убер-скрипт, когда есть универсальный has_info на самый крайний случай, к тому же его использовать ВРЕДНО, кто
не верит смотрите в движок и пользуйтесь на сервере пакетом объекта
]]
-- Каждая функция в этом файле используется как условие xr_logic: {=функция !функция}
-- Если в функцию необходимо передавать параметры, то:  {=функция(парам1:парам2:...) !функция(парам1:парам2:...)}
-- Формат: function f(actor, npc). В случае передачи параметров: function f(actor, npc, p).
-- Детали реализации нужно помещать в файл xr_conditions_impl.script, а не в этот файл.

-- ----------------------------------------------------------------------------------------------------
-- Общие функции
-- ----------------------------------------------------------------------------------------------------
-- видим ли мы еще "черный экран" или нет?
function black_screen(actor, npc)
    return device().precache_frame > 1
end

-- проверка, что актер жив
function actor_alive(actor, npc)
    if actor and actor:alive() then
        return true
    end
    return false
end

-- проверка, что актер мертв
function actor_dead(actor, npc)
    if actor and not actor:alive() then
        return true
    end
    return false
end

function is_wounded(actor, npc)
    return ai_wounded.is_wounded(npc)
end

function dist_to_actor_le(actor, npc, p)
    local d = p[1]
    return d and npc:position():distance_to_sqr(actor:position()) <= d * d
end

function dist_to_actor_ge(actor, npc, p)
    local d = p[1]
    return d and npc:position():distance_to_sqr(actor:position()) >= d * d
end

-- проверка того что дистанция до обьекта <= заданной
-- параметры: [sid,dist]
function distance_to_obj_le(actor, npc, p)
    local npc1 = level.object_by_sid(p[1])
    if npc1 then
        local res = npc:position():distance_to_sqr(npc1:position()) <= p[2]*p[2]
        --printf("xr_cond<distance_to_obj_le>: %s", res)
        return res
    end
    return false
end

-- проверка того что дистанция до обьекта >= заданной
-- параметры: [sid,dist]
function distance_to_obj_ge(actor, npc, p)
    local npc1 = level.object_by_sid(p[1])
    if npc1 then
        local res = npc:position():distance_to_sqr(npc1:position()) >= p[2]*p[2]
        --printf("xr_cond<distance_to_obj_ge>: %s", res)
        return res
    end
    return false
end

-- проверка того что npc находится в заданной зоне
-- !!! ВЫЗЫВАТЬ ТОЛЬКО ИЗ SPACE RESTRICTOR !!!
-- параметры: [sid1:sid2:...]
-- !!! НЕКОРРЕКТНО РАБОТАЕТ ДЛЯ ОБЬЕКТОВ В offline'e !!!
-- !!! ДЛЯ ГАРАНТИИ ИСПОЛЬЗОВАТЬ one_obj_in_zone !!!
--// Карлан: она В ПРИНЦИПЕ некорректно работает, сносим
-- function obj_in_zone(actor, zone, p)
    -- local npc1, i, v = 0, 0, 0
    -- for i, v in pairs(p) do
        -- npc1 = level.object_by_sid(v)
        -- if npc1 and zone:inside(npc1:position()) then
            -- return true
        -- end
    -- end
    -- return false
-- end

function one_obj_in_zone(actor, zone, p)
    --local def_offline = (p[2] ~= "false") -- default (true) result if npc in offline
    local obj1 = level.object_by_sid(p[1])

    if obj1 then -- npc is online
        return zone:inside(obj1:position())
    else -- npc is offline
        return (p[2] ~= "false") -- default (true) result if npc in offline
    end
end

function actor_in_zone(actor, npc, p)
    local zone = db.zone_by_name[p[1]]
    return obj_in_zone(actor, zone)
end
function actor_out_zone(actor, npc, p)
    local zone = db.zone_by_name[p[1]]
    if zone == nil then
        return false
    end
    return not obj_in_zone(actor, db.zone_by_name[p[1]])
end

-- true, если здоровье npc <= заданному значению
-- false в противном случае
function health_le(actor, npc, p)
    return p[1] and npc.health < p[1]
end

-- true, если здоровье вертолёта <= заданному значению
-- false в противном случае
function heli_health_le(actor, obj, p)
    return p[1] and obj:get_helicopter():GetfHealth() < p[1]
end

function enemy_gulag(actor, npc, p)
    local enemy = db.storage[npc:id()].enemy

    if enemy and enemy:alive() and enemy:id() ~= actor_id then
        local g = m_gulag.get_npc_gulag(enemy)

        if g ~= nil then
            local n = g.name
            local i, v = 0, 0

            for i, v in pairs(p) do
                if n == v then
                    return true
                end
            end
        end
    end
    return false
end

function gulag_state(actor, npc, p)
    if m_gulag.getGulagState(p[1]) == p[2] then
        return true
    end
    return false
end

function npc_community(actor, npc, p)
    if p[1] == nil then
        abort("Wrong number of params in npc_community")
    end

    if npc:character_community() == p[1] then
        return true
    end
    return false
end

function npc_rank(actor, npc, p)
    if p[1] == nil then
        abort("Wrong number of params in npc_rank")
    end

    if m_ranks.get_obj_rank_name(npc) == p[1] then
        return true
    end
    return false
end

function npc_profile(actor, npc, p)
    if p[1] == nil then
        abort("Wrong number of params in npc_profile")
    end
    
    if npc:profile_name() == p[1] then
        return true
    end
    return false
    
end


-- Проверка того что удар был нанесен кем-то из npc указанных в списке.
-- Параметры это story_id персонажей. Можно задавать несколько story_id.
function hitted_by(actor, npc, p)
    local npc1
    local hitter_id = read_pstor('hitter_id', INVALID_ID, npc)
    for _,v in pairs(p) do
        npc1 = level.object_by_sid(v)
        if npc1 and hitter_id == npc1:id() then
            return true
        end
    end
    -- local t = db.storage[npc:id()].hit
    -- if t then
        -- for i, v in pairs(p) do
            -- npc1 = level.object_by_sid(v)
            -- if npc1 and t.who == npc1:id() then
                -- printf("_bp: hitted_by(%d)", v)
                -- return true
            -- end
        -- end
    -- end
    return false
end

-- Проверка, что лучшее оружие персонажа - пистолет
function best_pistol(actor, npc)
    local pistol = npc:item_in_slot(PISTOL_SLOT)
    if pistol ~= nil then
        return true
    else
        return false
    end
--[[
    local wpn = npc:best_weapon()
    if wpn == nil then
        return false
    end
    wpn = get_clsid(wpn)
    if wpn == nil then
        return false
    end
    if wpn == clsid.wpn_hpsa then return true
    elseif wpn == clsid.wpn_hpsa then return true
    elseif wpn == clsid.wpn_pm then return true
    elseif wpn == clsid.wpn_fort then return true
    elseif wpn == clsid.wpn_walther then return true
    elseif wpn == clsid.wpn_usp45 then return true
    else return false end
]]
end

-- Проверка того что персонаж был убит кем-то из npc указанных в списке.
-- Параметры это story_id персонажей. Можно задавать несколько story_id.
function killed_by(actor, npc, p)
    local npc1
   -- local t = db.storage[npc:id()].death
    local killer_id = read_pstor('killer_id', INVALID_ID, npc)
   -- if t then
        for i, v in pairs(p) do
            npc1 = level.object_by_sid(v)
            if npc1 and killer_id == npc1:id() then
                printf("_bp: killed_by(%d)", v)
                return true
            end
        end
   -- end
    return false
end

-- проверка (по story_id) того, что проверяемыq npc жив
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_alive(actor, npc, p)
    local npc1
    npc1 = level.object_by_sid(p[1])
    return npc1 and npc1:alive()
end

--// Karlan: is_dead_all использовалась в CS, но там в другом виде предстала

-- проверка (по story_id) того, что хотя бы один из проверяемых сталкеров мертв
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_dead_one(actor, npc, p)
    local npc1
    for i, v in pairs(p) do
        npc1 = level.object_by_sid(v)
        if not npc1 or not npc1:alive() then
            printf("_bp: is_dead_one(%d) = true", v)
            return true
        end
    end
    return false
end

-- проверка (по story_id) того, что хотя бы один из проверяемых сталкеров мертв
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_dead(actor, npc, p)
    local npc1
    npc1 = level.object_by_sid(p[1])
    return not npc1 or not npc1:alive()
end

-- проверка (по story_id) того, что нашим врагом есть хотя бы кото-то один из списка
function check_fighting(actor, npc, p)
    local enemy = db.storage[npc:id()].enemy
    local sid
    if enemy and enemy:alive() then
        sid = enemy:story_id()
        for i, v in pairs(p) do
            --printf("_bp: %s.check_fighting(%d)", npc:name(), v)
            if type(v) == 'number' and sid == v then
                --printf("TRUE")
                return true           
            end
        end
    end
    --printf("_bp: check_fighting() = false")
    return false
end

function val_nap1_check_fighting(actor, npc, p)
    local enemy, npc1
    for i, v in pairs(p) do
        npc1 = level.object_by_sid(v)
        if npc1 then
            enemy = npc1:best_enemy()
            if enemy and (enemy:id() == npc:id() or enemy:id() == actor_id) then
                return true
            end
        end
    end
    return false
end

-- true, если гулага с таким именем (или story id) не существует или в нём нет никого
function gulag_empty(actor, npc, p)
    if is_string(p[1]) then
        return (m_gulag.getGulagPopulationComed(p[1]) == 0)
    end
    warning("~~>WARNING: {gulag_empty} error: arg is not string (%s, type = [%s])", p[1], type(p[1]))
    return false
end

-- true, если  в указанном гулаге народу меньше чем надо.
function gulag_population_le(actor, npc, p)
    if is_string(p[1]) and tonumber(p[2]) then
        return m_gulag.getGulagPopulation(p[1]) <= tonumber(p[2])
    end
    warning("~~>WARNING: {gulag_population_le} error: arg is not string or number (%s, type = [%s])", p[1], type(p[1]))
    return false
end

-- true, если  в указанном гулаге народу больше чем надо.
function gulag_population_ge(actor, npc, p)
    if (is_string(p[1]) or tonumber(p[1])) and tonumber(p[2]) then
        return m_gulag.getGulagPopulation(p[1]) >= tonumber(p[2])
    end
    warning("~~>WARNING: {gulag_population_ge} error: arg is not string or number (%s, type = [%s])", p[1], type(p[1]))
    return false
end

-- true, если  в указанном гулаге пришло народу меньше чем надо.
function gulag_population_comed_le(actor, npc, p)
    if (is_string(p[1]) or tonumber(p[1])) and tonumber(p[2]) then
        return m_gulag.getGulagPopulationComed(p[1]) <= tonumber(p[2])
    end
    warning("~~>WARNING: {gulag_population_comed_le} error: arg is not string or number (%s, type = [%s])", p[1], type(p[1]))
    return false
end

-- true, если  в указанном гулаге пришло народу больше чем надо.
function gulag_population_comed_ge(actor, npc, p)
    if (is_string(p[1]) or tonumber(p[1])) and tonumber(p[2]) then
        return m_gulag.getGulagPopulationComed(p[1]) >= tonumber(p[2])
    end
    warning("~~>WARNING: {gulag_population_comed_ge} error: arg is not string or number (%s, type = [%s])", p[1], type(p[1]))
    return false
end

-- возвращает количество опасных персонажей в гулаге(живых и не раненных).
function gulag_population_active(actor, npc, p)
     local gulag = m_gulag.get_gulag_by_name( p[1] )

    if gulag == nil then
        warning("~~>WARNING: {gulag_population_active} error: arg is not string (%s, type = [%s])", p[1], type(p[1]))
        return 0
    end
    
    local val = 0
    
    for k,v in pairs(gulag.Object) do
        if ( v == true or
		v:alive() and not ai_wounded.is_heavy_wounded_by_id(k) ) and
            gulag.Object_begin_job[k] == true
        then
            val = val + 1
        end
    end
    return val
end

function gulag_inactive(actor, npc, p)
     local gulag = m_gulag.get_gulag_by_name( p[1] )

    if gulag == nil then
        warning("~~>WARNING: {gulag_inactive} error: arg is not string (%s, type = [%s])", p[1], type(p[1]))
        return false
    end
    
    local val = 0
    
    for k,v in pairs(gulag.Object) do
        if ( v == true or
		v:alive() and not ai_wounded.is_heavy_wounded_by_id(k) ) and
            gulag.Object_begin_job[k] == true
        then
            val = val + 1
        end
    end
    return val == 0
end

function gulag_population_active_le(actor, npc, p)
     local gulag = m_gulag.get_gulag_by_name( p[1] )

    if gulag == nil then
        warning("~~>WARNING: {gulag_population_active_le} error: arg is not string (%s, type = [%s])", p[1], type(p[1]))
        return false
    end
    
    local val = 0
    
    for k,v in pairs(gulag.Object) do
        if ( v == true or
		v:alive() and not ai_wounded.is_heavy_wounded_by_id(k) ) and
            gulag.Object_begin_job[k] == true
        then
            val = val + 1
        end
    end
    return val <= p[2]
end

-- true, если в указанном гулаге потери больше или равны заданным
function gulag_casualities_ge(actor, npc, p)
    if (is_string(p[1]) or tonumber(p[1])) and tonumber(p[2]) then
        return m_gulag.getCasualities(p[1]) >= tonumber(p[2])
    end
    warning("~~>WARNING: {gulag_casualities_ge} error: arg is not string or number (%s, type = [%s])", p[1], type(p[1]))
    return false
end

-- true, если у актёра в инвентаре есть указанный предмет
-- false, если нету, либо не задана секция предмета
function actor_has_item(actor, npc, p)
    return p[1] ~= nil and actor:object( p[1] ) ~= nil
end

-- возвращает true, если в текущей схеме персонажа взведён указанный сигнал.
function signal(actor, npc, p)
    if p[1] then
        local st   = db.storage[npc:id()]
        local sigs = st[st.active_scheme].signals
--        printf( "xr_conditions.signal: npc=%s, scheme=%s", npc:name(), tostring(st.active_scheme) )
        return sigs ~= nil and sigs[p[1]] == true
    else
        return false
    end
end

-- возвращает true, если значение указанного счётчика актёра больше указанного числа
function counter_greater(actor, npc, p)
    if p[1] and p[2] then
        local c = xr_logic.pstor_retrieve(actor, p[1], 0)
        return c > p[2]
    else
        return false
    end
end

-- текущий враг на расстоянии больше или равном заданному расстоянию
-- для combat_ignore
function fighting_dist_ge(actor, npc, p)
    return db.storage[npc:id()].enemy:position():distance_to( npc:position() ) >= p[1]
end

-------------------------------------------------------------------------------------------------------
-- Функции поддержки kamp
function _kamp_talk(actor, npc)
    if ai_kamp.kamp_stalkers[npc:id()] then
        return ai_kamp.kamp_stalkers[npc:id()]
    end
    return false
end

function _used(actor, npc)
    return npc:is_talking()
end

-------------------------------------------------------------------------------------------------------

function has_enemy(actor, npc)
    return npc:best_enemy() ~= nil
end

function see_enemy(actor, npc)
    local enemy = npc:best_enemy()
    
    if enemy ~= nil then 
        return npc:see(enemy) 
    end
    return false
end

function talking(actor, npc)
    return actor:is_talking()
end

function see_actor(actor, npc)
    return npc:alive() and npc:see(actor)
end

function actor_enemy(actor, npc)
   -- local t = db.storage[npc:id()].death
    local killer_id = read_pstor('killer_id', INVALID_ID, npc)
    return npc:relation(actor) == game_object.enemy or (killer_id == actor_id)
end

function gar_dm_nearest_bandit(actor, npc)
    --printf("_bp: xr_conditions: nearest [%s]? %s", npc:name(),
    return gar_dm_nearest_bandit(actor, npc, 1)
end

function gar_dm_2nd_nearest_bandit(actor, npc)
    --printf("_bp: xr_conditions: 2nd nearest [%s]? %s", npc:name(),
    return gar_dm_nearest_bandit(actor, npc, 2)
end

--// Karlan to ALL: this is at most a makeshift 
function gar_dm_nearest_bandit(actor, npc, which)
    --printf("_bp: gar_dm_nearest_bandit: npc='%s', which=%d", npc:name(), which)
    local dists = {}
    local n = 1

    local gar_dm_bandit1 = level.object_by_sid(101)
    if gar_dm_bandit1 and gar_dm_bandit1:alive() then
        dists[n] = { who = gar_dm_bandit1, dist = distance_between(actor, gar_dm_bandit1) }
        n = n + 1
    end

    local gar_dm_bandit2 = level.object_by_sid(102)
    if gar_dm_bandit2 and gar_dm_bandit2:alive() then
        dists[n] = { who = gar_dm_bandit2, dist = distance_between(actor, gar_dm_bandit2) }
        n = n + 1
    end

    local gar_dm_bandit3 = level.object_by_sid(103)
    if gar_dm_bandit3 and gar_dm_bandit3:alive() then
        dists[n] = { who = gar_dm_bandit3, dist = distance_between(actor, gar_dm_bandit3) }
        n = n + 1
    end

    if n <= which then
        --printf("_bp: gar_dm_nearest_bandit: n (%d) <= which (%d): return false", n, which)
        return false
    end

    table.sort(dists, dist_less)

    local i_am_the_one = dists[which].who:id() == npc:id()
    --printf("_bp: gar_dm_nearest_bandit: dist[which].who='%s', npc='%s': return %s", dists[which].who:name(), npc:name(), i_am_the_one)

    return i_am_the_one
end

function trade_buy_good(actor, npc)
    return db.storage[npc:id()].trade.buy_good
end

function trade_deal_good(actor, npc)
    return db.storage[npc:id()].trade.deal_good
end

function trade_deal_bad(actor, npc)
    return db.storage[npc:id()].trade.deal_bad
end

function trading(actor, npc)
    return db.storage[npc:id()].trade.trading
end

function hit_by_actor(actor, npc)
    -- local t = db.storage[npc:id()].hit
    local hitter_id = read_pstor('hitter_id', INVALID_ID, npc)
    -- local hit_by_actor = (t ~= nil and t.who == actor_id)
    local hit_by_actor = hitter_id == actor_id
    printf("_bp: hit_by_actor: %s", hit_by_actor)
    return hit_by_actor
end

function killed_by_actor(actor, npc)
    local killer_id = read_pstor('killer_id', INVALID_ID, npc)
    local is_actor = killer_id == actor_id
    printf("killed_by_actor: <%s>", is_actor)
    return is_actor
end

function actor_has_weapon (actor, npc)
    local obj = actor:active_item ()
    if obj == nil or IsWeapon(obj) == false then return false end
    return true
end

function heavy_wounded(actor, npc)
    return ai_wounded.is_heavy_wounded_by_id( npc:id() )
end 

function is_day (actor, npc)
    return is_nominal_day()
end    

function mob_was_hit(actor, npc)
    local h = npc:get_monster_hit_info()
    if h.who and h.time ~= 0 then
        return true
    end
    return false
end

-- текущий враг актёр?
function fighting_actor(actor, npc)
    local enemy = db.storage[npc:id()].enemy
    return enemy and enemy:id() == actor_id
end

function esc_tutorial_flesh_died_in_anomaly(actor, npc)
    local killer_name = read_pstor('killer_name', nil, npc)
    --local t = db.storage[npc:id()].death
  --  if t and t.killer_name then
        if killer_name == "esc_tutorial_mincer_02" or
           killer_name == "esc_tutorial_mosquito_bald_01" or
           killer_name == "esc_tutorial_mincer_01" then
            return true
        end
   -- end
    return false
end


------------------------------------------------------------------------------------
-- Special functions for Garbage
------------------------------------------------------------------------------------
function gar_boars_nest2_dead(actor, npc)
    return gulag_population_le(actor, npc, {"gar_boars_nest2",0})
end

function gar_damaged_bandits(actor, npc)
    return gulag_population_active(actor, npc, {"gar_bandit_agr"}) <= 5
end

function gar_angar_sleep(actor,npc)
    return (gulag_empty(actor,npc,{"gar_seryi_bandits"}) and not has_info("agr_krot_band_start")) or (gulag_population_le(actor,npc,{"gar_smart_bandit_large_lager",9}) and has_info("agr_krot_band_start"))
end

function gar_not_damaged_bandits(actor, npc)
    return  not this.gar_damaged_bandits (actor, npc)
end

function gar_bandits_seryi_die()
    return gulag_population_active(actor, npc, {"gar_seryi_bandits"}) == 0
end

function gar_bandits_seryi_not_die()
    return not gar_bandits_seryi_die()
end


------------------------------------------------------------------------------------
-- Special functions for Dark Valley
------------------------------------------------------------------------------------
-- General combat ignore for bandits
function val_bandits_ci(actor, npc)
    local ig = {val_escort_captive_enemy = 400,
                val_sacrifice_finish = 401,
                val_prisoner_free = 402}

    local enemy = db.storage[npc:id()].enemy
    local sid
    if enemy and enemy:alive() then
        sid = enemy:story_id()
        for v, i in pairs(ig) do
            if sid == i then
                if has_info(v) then
                    return false
                end
                return true
            end
        end
    end
    return false
end

-- Combat ignore for bandits with checking combat with actor checking
function val_bandits_ci_actor(actor, npc, p)
    local ig = {val_escort_captive_enemy = 400,
                val_sacrifice_finish = 401,
                val_prisoner_free = 402}

    local enemy = db.storage[npc:id()].enemy
    local sid
    if enemy and enemy:alive() then
        if enemy:id() == actor_id then
            return npc:position():distance_to_sqr(actor:position()) >= p[1] * p[1]
        end

        sid = enemy:story_id()
        for v, i in pairs(ig) do
            if sid == i then
                if has_info(v) then
                    return false
                end
                return true
            end
        end
    end
    return false
end

-- параметры: [dist]
function val_escort_captive_dist_to_guards_ge(actor, npc, p)
    local d2 = p[1] * p[1]

    local g1 = level.object_by_sid(407)
    if g1 and g1:alive() then
        if npc:position():distance_to_sqr(g1:position()) < d2 then
            --printf("xr_cond <captive_dist_to_guards>: FALSE")
            return false
        end
    end

    local g2 = level.object_by_sid(408)
    if g2 and g2:alive() then
        if npc:position():distance_to_sqr(g2:position()) < d2 then
            --printf("xr_cond <captive_dist_to_guards>: FALSE")
            return false
        end
    end

    --printf("xr_cond <captive_dist_to_guards>: TRUE")
    return true
end

function val_escort_captive_dist_to_guards_le(actor, npc, p)
    local d2 = p[1] * p[1]

    local g1 = level.object_by_sid(407)
    if g1 and g1:alive() then
        if npc:position():distance_to_sqr(g1:position()) > d2 then
            --printf("xr_cond <captive_dist_to_guards>: FALSE")
            return false
        end
    end

    local g2 = level.object_by_sid(408)
    if g2 and g2:alive() then
        if npc:position():distance_to_sqr(g2:position()) > d2 then
            --printf("xr_cond <captive_dist_to_guards>: FALSE")
            return false
        end
    end

    --printf("xr_cond <captive_dist_to_guards>: TRUE")
    return true
end

function val_fighting_captive(actor, npc)
    -- FIXME: use SID!!!
    -- db.storage[npc:id()].enemy:story_id() == 400
    -- return db.storage[npc:id()].enemy:name() == "val_escort_captive"
    return db.storage[npc:id()].enemy:story_id() == 400
end

function val_fighting_sacrifice_victim(actor, npc)
    -- FIXME: use SID!!!
    return db.storage[npc:id()].enemy:name() == "val_sacrifice_victim"
end    

function val_fighting_prisoner(actor, npc)
    -- FIXME: use SID!!!
    return db.storage[npc:id()].enemy:name() == "val_prisoner_captive"
end    

------------------------------------------------------------------------------------
-- Special functions for Pripyat
------------------------------------------------------------------------------------
function pri_followers_can_hear(actor, npc)
    local gulag = m_gulag.get_gulag(823)

	if has_info('pri_wave7_end') then return false end --// Karlan: не засоряем 

    return not has_info("pri_followers_start") or           
           gulag ~= nil and gulag:get_population() > 0 and
           not gulag:npc_is_enemy_to_anybody(actor)
end

function pri_monolith_combat_ignore(actor, npc)
    local enemy = db.storage[npc:id()].enemy

    if enemy and enemy.clsid == clsid.snork_s and enemy:alive() then
        local g = m_gulag.get_npc_gulag(enemy)
        return g ~= nil and (g.name == "pri_snork_nest1" or g.name == "pri_snork_nest2")
    else
        return false
    end
end

function pri_follower_see_ambush (actor, npc)
    local gulag = m_gulag.get_gulag_by_name("pri_wave7")

    if gulag == nil then
        return true
    end
    
    for k,v in pairs(gulag.Object) do
        if v ~= nil and npc:best_enemy() and npc:best_enemy():id() == v:id()
            then
                -- printf("[plecha] %s see %s or has enemy %s", string.exformat(npc), string.exformat(v), string.exformat(npc:best_enemy()))
                return true
        end
    end
    return false
end


------------------------------------------------------------------------------------
-- Special functions for Escape
------------------------------------------------------------------------------------
function esc_blokpost_night(actor,npc)
    if m_gulag.getGulagState("esc_blokpost") == 1 then
        return true
    end
    return false
end

function esc_bandits_die(sctor,npc)
    if has_info("esc_kill_bandits_quest_kill") or has_info("esc_kill_bandits_noquest_kill") then
        return true
    end
    return false
end

------------------------------------------------------------------------------------
-- Special functions for BAR - ROSTOK
------------------------------------------------------------------------------------
function bar_arena_actor_inside(actor,npc)
    local t = db.zone_by_name["bar_arena_waiter"]
    if t and actor then
        if t:inside(actor:position()) then
            return true
        end
    end
    return false
end
function bar_arena_actor_fight(actor,npc)
    local t = db.zone_by_name["bar_arena_sr"]
    local tt = db.zone_by_name["bar_arena_waiter"]
    if t and tt and actor then
        if t:inside(actor:position()) and
           not tt:inside(actor:position())
        then
            return true
        end
    end
    return false
end
function bar_arena_actor_outside(actor,npc)
    local t = db.zone_by_name["bar_arena_waiter_out"]
    if t and actor then
        if t:inside(actor:position()) then
            return true
        end
    end
    return false
end
function bar_dolg_alarm(actor,npc)
    if m_gulag.getGulagState("bar_dolg_general") == 2 then
        return true
    end
    if m_gulag.getGulagState("bar_dolg_veterans") == 2 then
        return true
    end
    return false
end

function bar_actor_rank_stalker (actor,npc)
    if actor:character_rank() > 300 then
        return true
    end
end

function bar_actor_rank_veteran (actor,npc)
    if actor:character_rank() > 600 then
        return true
    end
end

function bar_arena_fight_3_end ()
    return has_info("bar_arena_fight_3_stalker_1_die") and has_info("bar_arena_fight_3_stalker_2_die")
end

function bar_arena_fight_4_end ()
    return has_info("bar_arena_fight_4_stalker_1_die") and has_info("bar_arena_fight_4_stalker_2_die") and has_info("bar_arena_fight_4_stalker_3_die")
end

function bar_arena_fight_5_end ()
    return has_info("bar_arena_fight_5_stalker_1_die") and has_info("bar_arena_fight_5_stalker_2_die")
end

function bar_arena_fight_6_end ()
    return has_info("bar_arena_fight_6_stalker_1_die") and has_info("bar_arena_fight_6_stalker_2_die") and has_info("bar_arena_fight_6_stalker_3_die") and has_info("bar_arena_fight_6_stalker_4_die") and has_info("bar_arena_fight_6_stalker_5_die") and has_info("bar_arena_fight_6_stalker_6_die")
end

function bar_arena_fight_8_end ()
    return has_info("bar_arena_fight_8_stalker_1_die") and has_info("bar_arena_fight_8_stalker_2_die") and has_info("bar_arena_fight_8_stalker_3_die") and has_info("bar_arena_fight_8_stalker_4_die")
end
------------------------------------------------------------------------------------
-- Special functions for Military
------------------------------------------------------------------------------------
function mil_actor_enemy (actor, npc)
    local npc = level.object_by_sid (707)
    if npc == nil or npc:alive () == false then
       npc = level.object_by_sid (702) 
       if npc == nil or npc:alive () == false then
          npc = level.object_by_sid (728)
          if npc == nil then 
             printf ("NOT LEAVED NPC !!!")
             return
          end
        end         
    end
    return npc:relation (actor) == game_object.enemy
end

function mil_actor_enemy_freedom (actor, npc)
    if relation_registry.community_goodwill ("freedom", actor_id) < -500 then
       return true
    end   
    return false
end

------------------------------------------------------------------------------------
-- Special functions for Deadcity
------------------------------------------------------------------------------------
function cit_combat_ignore(actor, npc, p) --// Karlan: функция рудиментарна, но оставил, мало-ли кому МГ приспичит присобачить со всем тем БАГАЖОМ что там есть
    local enemy = db.storage[npc:id()].enemy
    if enemy and enemy:alive() then
        if enemy:id() == actor_id then
            return p[1] ~= nil and not has_info(p[1])
        elseif enemy:story_id() == 1200 then
            return true
        else
            local g = m_gulag.get_npc_gulag(enemy)
            local gulags = {cit_kanaliz1 = 1, cit_kanaliz2 = 1, cit_kanaliz3 = 1}
            return g ~= nil and gulags[g] == 1
        end
    end
    return false
end


-------------------------------------------------------------------------------------
-- Special for Agroprom
-------------------------------------------------------------------------------------

function agr_nii_pop_check(actor, npc)
    if (gulag_population_active(actor, npc, {"agr_nii"}) < 6) then
        return true
    end
    return false
end


-------------------------------------------------------------------------------------
-- Special for rostok
-------------------------------------------------------------------------------------
function rostok_gulag_inactive(actor, npc)
    local gulag = m_gulag.get_gulag_by_name("bar_freedom_attack")

    if gulag == nil then
        return true
    end
    
    local val = 0
    
    for k,v in pairs(gulag.Object) do
        local job_prior = gulag.Job[gulag.ObjectJob[k]].prior

        if ( v == true or
           ( v:alive() and not ai_wounded.is_heavy_wounded_by_id(k) and
            job_prior == 5)) and gulag.Object_begin_job[k] == true
        then
            val = val + 1
        end
    end
    if val == 0 then 
        return true
    end
    return false
end

function agr_factory_hold_inactive (actor, npc)
     local gulag = m_gulag.get_gulag_by_name("agr_factory_hold")

    if gulag == nil then
        return true
    end
    
    local val = 0
    
    for k,v in pairs(gulag.Object) do
        if ( v == true or
		v:alive() and not ai_wounded.is_heavy_wounded_by_id(k) ) and
            gulag.Object_begin_job[k] == true
        then
            val = val + 1
        end
    end
    if val == 0 then 
        return true
    end
    return false
end


function rostok_gulag_2_inactive(actor, npc)
     local gulag = m_gulag.get_gulag_by_name("bar_freedom_chasers_attack")

    if gulag == nil then
        return true
    end
    
    local val = 0
    
    for k,v in pairs(gulag.Object) do
        if ( v == true or
		v:alive() and not ai_wounded.is_heavy_wounded_by_id(k) ) and
            gulag.Object_begin_job[k] == true
        then
            val = val + 1
        end
    end
    if val == 0 then 
        return true
    end
    return false
end

function rostok_dist_to_actor_le(actor, npc, p)
    if actor then
        return npc:position():distance_to_sqr(actor:position()) < p[1]*p[1]
    end
    return false
end

function has_ghost_pda ()
        return actor:object ("yantar_ghost_pda") ~= nil
end


-------------------------------------------------------------------------------------
-- Special for Radar
-------------------------------------------------------------------------------------
function rad_pass_time(actor, npc)
    return true
--    return level.get_time_hours() >= 10 and level.get_time_hours() < 11
end


-------------------------------------------------------------------------------------
-- Special for Sarcofag
-------------------------------------------------------------------------------------
function actor_has_decoder(actor, npc)
    return actor:object("decoder") ~= nil
end


function actor_on_level(actor, npc, p)
    return p[1] == level.name()
end

function can_send_tutorial(actor, npc, p)
    if actor:is_talking() then
        return false
    end
    if game.has_active_tutorial() then
        return false
    end
    if has_info("ui_inventory") then
        return false
    end
    if has_info("ui_pda") then
        return false
    end
    return true
end