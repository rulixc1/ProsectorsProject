--[[ ----------------------------------------------------------------------------------------------
 File       : manager_dialog.script
 Description: менеджер диалогов
 Copyright  : 2017 © Prosectors Project
 Author(s)  : Karlan (по материалам GSC)
--]] ----------------------------------------------------------------------------------------------
--// Karlan->Team: нужно что-то придумать для квестовых диалогов, так как на каждый диалог придется заводить новый массив, что, возможно, не совсем красиво, также нужно будет сделать здесь все диалоги по типу бартера, торговли инфой, тайниками - все прекрасно подходит сюда, где-то отдельно их создавать смысла никакого не вижу
--//-----------------------------------------------------------------
--// Flags for enable output of the debug information
--//-----------------------------------------------------------------
_DEBUG_ = false --// file under debugging?
_DEBUG_GSC_ = _DEBUG_ and false --// only for scripts by GSC
--//-----------------------------------------------------------------------------------------------
--// Variables
--//-----------------------------------------------------------------------------------------------
local phrase_ini    = ini_file("misc\\manager_dialog\\manager_dialog.ltx")
local phrase_id     = 100 --// Karlan: это какая-то заоблачная цифра, даже для особо витиеватых динамичных диалогов хватит и 10
local phrase        = {
    intro       = {},
    cool_info   = {},
    help_thanks = {},
}

selected_phrase_by_id = {
    intro       = {},
    cool_info   = {},
}
--//-----------------------------------------------------------------------------------------------
--// Local functions
--//-----------------------------------------------------------------------------------------------
local gen_phrase_id = function()
    phrase_id = phrase_id + 1
    return tostring(phrase_id)
end

local phrase_action = function(npc, actor, sel_tbl, p2, one_time)
    local cc = one_time and (is_table(sel_tbl[npc:id()]) and (sel_tbl[npc:id()].count + 1) or 1) or 0
    sel_tbl[npc:id()] = {phrase = p2, count = cc}
end

local calculate_predicate = function(npc, t)
    if is_string(t.community) and t.community ~= actor:character_community() then return false end
    if is_string(t.npc_community) and t.npc_community ~= npc:character_community() then return false end
    if is_string(t.relation) then
        local _, r = get_npc_relation(npc, actor)
        if t.relation ~= r then return false end
    end
    if is_number(t.npc_rank) and t.npc_rank > npc:character_rank() then return false end
    if is_string(t.level) and t.level ~= level.name() then return false end
    if is_table(t.condlist) and xr_logic.pick_section_from_condlist(actor, t.condlist) ~= 'true' then return false end
    assert(is_string(t.wounded), 'Beer from the user')
    if t.wounded == 'true' and precondition_info_global(_, npc) then return false end
    if t.wounded == 'false' and not precondition_info_global(_, npc) then return false end     
    return true
end

local phrase_precondition = function(npc, actor, tbl, sel_tbl, p1, p2, p3, p4)
    log('dialog id = [%s], prev_id = [%s], cur_id = [%s], ph_text = [%s]', p1, p2, p3, p4)
    local mem_phrase = (is_correct(sel_tbl) and is_table(sel_tbl[npc:id()])) and sel_tbl[npc:id()].phrase or nil
    local phrase = tbl[p3]
    local cur_predicate = calculate_predicate(npc, phrase)
    if mem_phrase then
        local predicate = calculate_predicate(npc, tbl[mem_phrase])
        if not predicate then sel_tbl[npc:id()] = nil return cur_predicate end
        if (mem_phrase ~= phrase.phr_id) or (sel_tbl[npc:id()].count > 0) then
            return false
        end
    end
    return cur_predicate
end
--//-----------------------------------------------------------------------------------------------
--// Initialization module
--//-----------------------------------------------------------------------------------------------
function init()
    assert(phrase_ini:section_exist('list'), [[There is no section [list] in manager_dialog.ltx]])
    local id, value, category = '','',''
    --// Итерируемся по всем настройкам фраз
    for i=0, phrase_ini:line_count('list')-1 do
        result, id, value   = phrase_ini:r_line('list',i,'','')
        assert(phrase_ini:section_exist(id), [[There is no section [%s] in manager_dialog.ltx]], id)
        assert(phrase_ini:line_exist(id, 'category'), [[Dialog manager error: not categoried in [%s] section]], id)
        --// Необходимо сформировать набор предикатов
        category = phrase_ini:r_string(id, 'category')
        local tt = {}
        tt.name = id
        --// Karlan: а вот тут такая же умопомрачительная история, как и с логикой, так что вызов стороннего и потустороннего строго запрещен!
        tt.community        = phrase_ini:line_exist(id, 'community') and phrase_ini:r_string(id, 'community') or nil
        tt.npc_community    = phrase_ini:line_exist(id, 'npc_community') and phrase_ini:r_string(id, 'npc_community') or nil
        tt.relation         = phrase_ini:line_exist(id, 'relation') and phrase_ini:r_string(id, 'relation') or nil
        tt.npc_rank         = phrase_ini:line_exist(id, 'npc_rank') and phrase_ini:r_u32(id, 'npc_rank') or nil
        tt.level            = phrase_ini:line_exist(id, 'level') and phrase_ini:r_string(id, 'level') or nil
        tt.condlist         = phrase_ini:line_exist(id, 'condlist') and parse_condlist(phrase_ini:r_string(id, 'condlist')) or nil
        tt.wounded          = phrase_ini:line_exist(id, 'wounded') and phrase_ini:r_string(id, 'wounded') or 'false'
        tt.phr_id           = gen_phrase_id()
        phrase[category][tt.phr_id] = tt
    end
    table.print(phrase, 'phrase')
end
--//-----------------------------------------------------------------------------------------------
--// Global functions
--//-----------------------------------------------------------------------------------------------
--//-----------------------------------------------------------------
--// Dialogs
--//-----------------------------------------------------------------
--// Необходимо создать стартовый диалог, с разветвлением на третьем уровне, где каждая фраза будет иметь одну и ту же функцию в прекондишне
function init_intro_dialog(dlg)
    local phr = dlg:AddPhrase("","0","",-10000)
          phr = dlg:AddPhrase("","1","0",-10000)

    for _,v in pairs(phrase.intro) do
        phr = dlg:AddPhrase(v.name, v.phr_id, "1", -10000)
        if phr then
            local phrase_script = phr:GetPhraseScript()
            phrase_script:AddPrecondition("manager_dialog.precondition_intro")
            --// Этот экшн запоминает последнюю фразу, чтобы персонаж говорил одно и то же
            --// Для фразы просьбы о помощи его добавлять не надо
            if v.wounded == "false" then
                phrase_script:AddAction("manager_dialog.phrase_action_intro")        
            end
        end
    end
end

--// Необходимо создать диалог актера, с разветвлением на втором уровне, где каждая фраза будет иметь одну и ту же функцию в прекондишне
function init_cool_info_dialog(dlg)
    local phr = dlg:AddPhrase("dm_general_cool_info","0","",-10000)
    
    phr = dlg:AddPhrase("dm_general_cool_info_no_more","1","0",-10000)
    local phrase_script = phr:GetPhraseScript()
    phrase_script:AddPrecondition("manager_dialog.precondition_cool_info_no_more")

    for _,v in pairs(phrase.cool_info) do
        phr = dlg:AddPhrase(v.name,v.phr_id,"0",-10000)
        if phr then
            phrase_script = phr:GetPhraseScript()
            phrase_script:AddPrecondition("manager_dialog.precondition_cool_info")
            phrase_script:AddAction("manager_dialog.phrase_action_cool_info")
        end
    end
end

--// Диалоги помощи раненным
function init_help_wounded_medkit_dialog(dlg)
    local phr = dlg:AddPhrase("dm_general_help_medkit","0","",-10000)
    local phrase_script = phr:GetPhraseScript()
    phrase_script:AddAction("m_talks.transfer_medkit")
    
    for _,v in pairs(phrase.help_thanks) do
        phr = dlg:AddPhrase(v.name,v.phr_id,"0",-10000)        
        if phr then
            phrase_script = phr:GetPhraseScript()
            phrase_script:AddPrecondition("manager_dialog.precondition_help_thanks")
        end
    end
end
--//-----------------------------------------------------------------
--// Actions
--//-----------------------------------------------------------------
function phrase_action_intro(npc, actor, p1, p2)
    phrase_action(npc, actor, selected_phrase_by_id.intro, p2)
end
function phrase_action_cool_info(npc, actor, p1, p2)
    phrase_action(npc, actor, selected_phrase_by_id.cool_info, p2, true)
end
--//-----------------------------------------------------------------
--// Preconditions
--//-----------------------------------------------------------------
function precondition_intro(npc, actor, p1, p2, p3, p4)
    return phrase_precondition(npc, actor, phrase.intro, selected_phrase_by_id.intro, p1, p2, p3, p4)
end
function precondition_cool_info(npc, actor, p1, p2, p3, p4)
    return phrase_precondition(npc, actor, phrase.cool_info, selected_phrase_by_id.cool_info, p1, p2, p3, p4)
end
function precondition_cool_info_no_more(npc)
    return is_table(selected_phrase_by_id.cool_info[npc:id()]) and selected_phrase_by_id.cool_info[npc:id()].count > 0
end
function precondition_help_thanks(npc, actor, p1, p2, p3, p4)
    return phrase_precondition(npc, actor, phrase.help_thanks, nil, p1, p2, p3, p4)
end
--//-----------------------------------------------------------------
--// Прекондишн, можно ли разрешать диалоги с болтовней ("расскажи мне о" например)
function precondition_info_global(actor, npc)
    if ai_wounded.is_wounded(npc) then
        return false
    end
    return true
end
--//-----------------------------------------------------------------------------------------------