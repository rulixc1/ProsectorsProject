--[[ ----------------------------------------------------------------------------------------------
 File       : m_ranks.script (based on ranks, xr_statistic)
 Description: получение рангов и управление статистикой
 Copyright  : 2017 © Prosectors Project
 Author(s)  : Karlan, Rulix
--]] ----------------------------------------------------------------------------------------------
--// todo: увести на ивенты
--// хранилище текстовых интерпретаций рангов и функции для работы с ним
local stalker_rank_intervals = {}
local monster_rank_intervals = {}
local stalker_max_rank_name = 0
local stalker_max_rank_value = 0
local monster_max_rank_name = 0
local monster_max_rank_value = 0
stalker_rank_unit = 0
local stalker_rank_list = {}
local communities_list = {}

local loaded = false
--//-----------------------------------------------------------------
--// Flags for enable output of the debug information
--//-----------------------------------------------------------------
_DEBUG_ = false --// file under debugging?
_DEBUG_GSC_ = _DEBUG_ and false --// only for scripts by GSC
--//-----------------------------------------------------------------
function init()
    if loaded then return end
    
    stalker_max_rank_name,stalker_max_rank_value = parse_ranks(sini:r_string( "game_relations", "rating" ),         stalker_rank_intervals )
    monster_max_rank_name,monster_max_rank_value = parse_ranks(sini:r_string( "game_relations", "monster_rating" ), monster_rank_intervals )
    stalker_rank_unit = 1/stalker_max_rank_value
	
    for rn,_ in pairs(stalker_rank_intervals) do
        table.insert(stalker_rank_list,rn)
    end
    for _,cn in ipairs(parse_list(sini,"game_relations","communities")) do
        if not tonumber(cn) then
            table.insert(communities_list,cn)
        end
    end
	
    -- log('stalker_rank_intervals ='); log('%s', stalker_rank_intervals)
    -- log('monster_rank_intervals ='); log('%s', monster_rank_intervals)
    -- log('monster_max_rank_name = [%s]; stalker_max_rank_name = [%s]', monster_max_rank_name, stalker_max_rank_name)
    event("item_take"):register(add_art_count)
    
    loaded = true
    log("init:[>]")
end
--//-----------------------------------------------------------------
function get_rank_name( rank, tbl )
    for name, interval in pairs( tbl ) do
        if rank >= interval[1] and rank < interval[2] then
            return name
        end
    end
    return
end

--// возвращает название ранга заданного game_object (персонажа)
function get_obj_rank_name(obj)
    local obj_rank = obj.m_story_id and obj:rank() or obj:character_rank()
    if IsStalker(obj) then
        return get_rank_name(obj_rank, stalker_rank_intervals) or stalker_max_rank_name
    else
        return get_rank_name(obj_rank, monster_rank_intervals) or monster_max_rank_name
    end
end

--// возвращает табличку с интервалом рангов для заданного названия интервала
function get_rank_interval(name)
    if not loaded then init() end
    return stalker_rank_intervals[name] or monster_rank_intervals[name]
end

--// возвращает список рангов
function get_rank_list()
    if not loaded then init() end
	return stalker_rank_list
end

--// возвращает список группировок
function get_communities_list()
    if not loaded then init() end
	return communities_list
end

--//-----------------------------------------------------------------
local kill_count_props = { --// todo:
    novice = 1, experienced = 2, veteran = 3, master = 4, --// поможет от косяков если разраб ленив, опционально
    stalker_novice      = 1, stalker_experienced          = 2, stalker_veteran          = 3, stalker_master     = 4,
    monolith_novice     = 1, monolith_experienced         = 2, monolith_veteran         = 3, monolith_master    = 4,
    military_novice     = 1, military_experienced         = 2, military_veteran         = 3, military_master    = 4,
    killer_novice       = 1, killer_experienced           = 2, killer_veteran           = 3, killer_master      = 4,
    ecolog_novice       = 1, ecolog_experienced           = 2, ecolog_veteran           = 3, ecolog_master      = 4,
    dolg_novice         = 1, dolg_experienced             = 2, dolg_veteran             = 3, dolg_master        = 4,
    freedom_novice      = 1, freedom_experienced          = 2, freedom_veteran          = 3, freedom_master     = 4,
    bandit_novice       = 1, bandit_experienced           = 2, bandit_veteran           = 3, bandit_master      = 4,
    zombied_novice      = 1, zombied_experienced          = 2, zombied_veteran          = 3, zombied_master     = 4,
    
    weak                = 1, normal                       = 2, strong                   = 3, --// живность, которую не знавала наука
    bloodsucker_weak    = 1, bloodsucker_normal           = 2, bloodsucker_strong       = 3, bloodsucker_fire   = 4,
    boar_weak           = 1, boar_normal                  = 2, boar_strong              = 3,
    controller_weak     = 4, controller_normal            = 4, controller_strong        = 4,
    dog_weak            = 1, dog_normal                   = 2, dog_strong               = 3,
    flesh_weak          = 1, flesh_normal                 = 2, flesh_strong             = 3,
    poltergeist_weak    = 2, poltergeist_normal           = 2, poltergeist_strong       = 2,
    pseudo_gigant_weak  = 4, pseudo_gigant_normal         = 4, pseudo_gigant_strong     = 4,
    pseudodog_weak      = 1, pseudodog_normal             = 2, pseudodog_strong         = 3,
    psy_dog_weak        = 1, psy_dog_normal               = 2, psy_dog_strong           = 3, rad_psy_dog        = 3, --// ???
    snork_weak          = 2, snork_normal                 = 3, snork_strong             = 4,
    tushkano_weak       = 1, tushkano_normal              = 1, tushkano_strong          = 1,
    zombie_weak         = 1, zombie_normal                = 2, zombie_strong            = 3, zombie_immortal    = 3,
    burer_weak          = 1, burer_normal                 = 2, burer_strong             = 3,
    fracture_weak       = 1,
    chimera_weak        = 3, electro_chimera_weak         = 4,
    cat_weak            = 1,
}

local name_in_ranks = { --// Karlan: дополнительный массив длЯ созданиЯ корректного имени длЯ жертвы
}

local excluded_name = {['novice'] = true, ['experienced'] = true, ['veteran'] = true, ['master'] = true, ['weak'] = true, ['normal'] = true, ['strong'] = true} --// for debug
function add_kill_count(victim, who)
    local props = (IsStalker(victim) and "stalkerkills") or (IsMonster(victim) and "monsterkills")
    if not props then return end
    local rank = get_obj_rank_name(victim)
    local community = get_obj_community(victim)
    local section = community.."_"..rank
    -- log('add_kill_count:section = [%s]', section)
    local sect_name = not kill_count_props[victim:section()] and (not kill_count_props[section] and ((kill_count_props[community] and community) or (kill_count_props[rank] and rank)) or section) or victim:section()
    local real_name = name_in_ranks[sect_name] or sect_name
    
    if not kill_count_props[sect_name] then --// false бесполезен
        log('kill_count_props ='); log('%s', kill_count_props)
        log('sect_alias ='); log('%s', sect_alias)
        abort("add_kill_count:required section [%s] not present, based [%s]", sect_name, section)
        return
    end
    if who and who:id() == actor_id then --// hack todo:
        if excluded_name[sect_name] then collect_info('Инвалидный дескриптор строки:[%s]:[%s]~>[%s]', victim, section, sect_name) end
        actor_stats.add_points(props, excluded_name[sect_name] and victim:section()..'_NOT_STRING' or sect_name, 1, kill_count_props[sect_name])
    end
    if not who:get_inventory_owner() and not who:get_base_monster() then return end --// Karlan: we write high-quality code :D
    if is_game_object(who) then    --// hack todo:
        who:set_character_rank(who:character_rank() + kill_count_props[sect_name])
    else
        who:set_rank(who:rank() + kill_count_props[sect_name])
    end
end

function add_art_count(e)
    local obj = e.item
    if obj:is_artefact() then
    --// Karlan->Karlan: потом доделать
        -- actor_stats.add_points('artefacts', obj:get_name(), 1, 1)
    end
end