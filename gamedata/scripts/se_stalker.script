_DEBUG_ = true
--[[
Изменения script_version:
    3 - сохранение поля job_online
    5 - сохранение поля was_in_smart_terrain
    6 - сохранение поля death_droped
    7 - сохранение поля treasure_processed
]]

class "se_stalker"    (cse_alife_human_stalker)
--------------------
function se_stalker:__init (section) super (section)
    self.ini = nil
    self.ini_initialized = false

    self.spawner_present = false

    self.smart_terrain_conditions = nil
    self.smart_terrain_conditions_initialized = false

    -- этот флаг берётся из работы смарта
    -- true     = всегда в онлайне
    -- false    = всегда в офлайне
    -- condlist = условие, которое отпределяет true или false
    -- nil      = смарту всё равно
    self.job_online          = nil
    self.job_online_condlist = nil

    -- посещал ли сталкер хоть один smart_terrain
    self.was_in_smart_terrain = false

    self.death_droped = false --'Генерил ли персонаж выпадаемые предметы или нет.

    self.treasure_processed = false --// шарился ли чувак на предмет тайника
    --' Test for dima
    self.dont_spawn_online = false
end
--------------------
function se_stalker:get_ini()
    if not self.ini_initialized then
        self.ini             = self:spawn_ini ()
        self.ini_initialized = true

        if self.ini:section_exist("spawner") then
            self.spawner = parse_condlist(self.ini:r_string("spawner", "cond"))
        end
    end
end
--------------------
function se_stalker:get_job_online()
    if self.job_online_condlist == nil then
        return self.job_online
    else
        return xr_logic.pick_section_from_condlist(self, self.job_online) ~= nil
    end
end
--------------------
function se_stalker:can_switch_offline ()
    if self:get_job_online() ~= nil then
        return not self:get_job_online()
    else
        return cse_alife_human_stalker.can_switch_offline (self)
    end
end
--------------------
function se_stalker:can_switch_online ()
    if self.dont_spawn_online == true then
        return false
    end

    if self:get_job_online() ~= nil then
        return self:get_job_online()
    end

    if self.ini == nil or self.spawner == nil then
        return cse_alife_human_stalker.can_switch_online(self)
    end
    
    if actor and actor:alive() == false then
        return self.online
    end    
    
    if self.online == false then
        return (xr_logic.pick_section_from_condlist(self, self.spawner) ~= nil) and cse_alife_human_stalker.can_switch_online(self)
    else
        if xr_logic.pick_section_from_condlist(self, self.spawner) ~= nil then 
            return true
        end
        return false
    end            
end
--------------------
function se_stalker:STATE_Write (packet)
    cse_alife_human_stalker.STATE_Write (self, packet)

    if self.job_online == true then
        packet:w_u8(0)
    elseif self.job_online == false then
        packet:w_u8(1)
    elseif self.job_online == nil then
        packet:w_u8(2)
    else
        packet:w_u8(3)
        packet:w_stringZ(self.job_online_condlist)
    end

    packet:w_bool(self.was_in_smart_terrain)
    packet:w_bool(self.death_droped )
    packet:w_bool(self.treasure_processed )
end
--------------------
function se_stalker:STATE_Read (packet, size)
    cse_alife_human_stalker.STATE_Read (self, packet, size)
    
    if self.script_version >= 3 then
        local t = packet:r_u8()

        if t == 0 then
            self.job_online = true
        elseif t == 1 then
            self.job_online = false
        elseif t == 2 then
            self.job_online = nil
        else
            self.job_online_condlist = packet:r_stringZ()

            self.job_online = parse_condlist(self.job_online_condlist)
        end
    end

    if self.script_version >= 5 then
        self.was_in_smart_terrain = packet:r_bool()
    end
    if self.script_version >= 6 then
        self.death_droped = packet:r_bool()
    end
    if self.script_version >= 7 then
        self.treasure_processed = packet:r_bool()
    end
end
--------------------
function se_stalker:on_before_register()
    self:fill_exclusives()
end
--------------------
local rank_table = {['default'] = 50, ['military'] = 10, ['stalker'] = 30, ['bandit'] = 25}
function se_stalker:on_register()
    cse_alife_human_stalker.on_register( self )
    
    local community = self:community()
    if(actor_stats.add_to_ranking~=nil)then
        if not(community == "zombied" or
           community == "monolith" or
           community == "arena_enemy")
        then
            actor_stats.add_to_ranking(self.id)
        end
    end

    --' Регистрация в таскменеджере
    manager_task.get_random_task():register_target(self)

    if self:alive() and self:smart_terrain_id() == 65535 then
        self:brain():update()
    end

    if self:alive() then
        self:set_rank(self:rank() + (rank_table[community] or rank_table.default))
    end
    --' Нарисовать мапспот с собой
--'    if m_sim_statistic.show_stalker_spot == true and self:alive() then
--'        local community, rank = m_sim_statistic.getNpcType(self)
--'        level.map_add_object_spot_ser(self.id, "alife_presentation_"..community, self:name().." "..community)
--'    end
end
--------------------
function se_stalker:on_unregister()
    cse_alife_human_stalker.on_unregister(self)

    --' Убрать мапспот с собой
--'    if m_sim_statistic.show_stalker_spot == true then
--'        local community, rank = m_sim_statistic.getNpcType(self)
--'        level.map_remove_object_spot(self.id, "alife_presentation_"..community)
--'    end

    se_smart_terrain.unregister_npc(self)

    --' Отрегистрация в таскменеджере
    manager_task.get_random_task():unregister_target(self)
    
    if(actor_stats.remove_from_ranking~=nil)then
        local community = self:community()
        if community == "zombied" or
           community == "monolith" or
           community == "arena_enemy"
        then
            return
        end
        actor_stats.remove_from_ranking(self.id)
    end
end
--------------------
function se_stalker:on_spawn()
    cse_alife_human_stalker.on_spawn(self)
end
--------------------
function se_stalker:on_death(killer)
    cse_alife_human_stalker.on_death(self, killer)
    if self.online == false then
        manager_trade.trade_remove(self)
    end
    --' Убрать мапспот с собой
    -- if m_sim_statistic.show_stalker_spot == true then
        -- local community, rank = m_sim_statistic.getNpcType(self)
        -- level.map_remove_object_spot(self.id, "alife_presentation_"..community)
    -- end
end
--------------------
function se_stalker:fill_exclusives()
    self:get_ini()
    self.smart_terrain_conditions             = se_smart_terrain.read_smart_terrain_conditions( self )

    if self.smart_terrain_conditions then
        for name, condlist in pairs(self.smart_terrain_conditions) do
            se_smart_terrain.exclusives[name] = (se_smart_terrain.exclusives[name] or 0) + 1
        end
    end
end





--'Торговец
class "se_trader" (cse_alife_trader)
function se_trader:__init (section) super (section)
end
function se_trader:keep_saved_data_anyway()
    return true
end