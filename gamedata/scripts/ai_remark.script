----------------------------------------------------------------------------------------------------
-- Remark
----------------------------------------------------------------------------------------------------
-- Разработчик: Andrey Fidrya (Zmey) af@svitonline.com
-- Изменения: Didenko Ruslan.
----------------------------------------------------------------------------------------------------
_DEBUG_ = true

local state_initial = 0
local state_animation = 1
local state_sound = 2
local state_finish = 3

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_remark" (property_evaluator)
function evaluator_need_remark:__init(storage, name) super(nil, name)
    self.st = storage
end
function evaluator_need_remark:evaluate()
    return xr_logic.is_active(self.object, self.st)
end

----------------------------------------------------------------------------------------------------------------------
class "action_remark_activity" (action_base)
function action_remark_activity:__init (storage, name) super(nil, name)
	self.st = storage
end
function action_remark_activity:initialize()
	action_base.initialize(self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	log("action_remark_activity[%s]initialize state %s",self.object:name(),self.state)
	if (self.action_end_signalled) then --// уже всё отыграно, нужно просто занять стейт
		state_mgr.set_state(self.object, self.st.anim, nil, nil, self:get_target(), { animation = self.st.anim_reset })
	elseif self.state > state_initial then --// если процесс был прерван - придётся начинать заново
		log("#action_remark_activity[%s]initialize: reset action (state %s)",self.object:name(),self.state)
		self.state = state_initial
	end
end
function action_remark_activity:activate_scheme()
    self.st.signals = {}
    self.anim_end_signalled = false
    self.sound_end_signalled = false
    self.action_end_signalled = false

  -- Определим нужно ли нам отыгрывать анимацию/поворачиваться на объект.
  self.anim_scheduled = true
  
  -- Определим нужно ли нам отыгрывать отдельно звук после поворота.
  if not self.st.snd_anim_sync and self.st.snd ~= nil then
    self.snd_scheduled = true
  else
    self.snd_scheduled = false
  end

	if self.st.snd == nil then
		self.sound_end_signalled = true
	end
  
  -- Задаем стартовое состояние
  self.state = state_initial
  log("action_remark_activity[%s]activate_scheme snd [%s]",self.object:name(),self.st.snd)
end
function action_remark_activity:get_target()
  local look_tbl = {}

  --' Если таргет не проинициализирован, то запускаем инициализатор.
  if self.st.target_init == false then
    self.st.target_position, self.st.target_id, self.st.target_init = initialize_gulag_target(self.object, self.st.target)
    if self.st.target_init == false then
      return nil
    end
  end

    if self.st.target_actor == true then
        look_tbl.look_object = actor
    end

    if self.st.target_id then
        look_tbl.look_object = level.object_by_id(self.st.target_id)
    end

    if self.st.target_position then
        look_tbl.look_position = self.st.target_position
    end

    return look_tbl
end
function action_remark_activity:turn_end_callback()
  printf("TURN END CALLBACK CALLED")
--  self.state = state_sound
--  self:update()
end
function action_remark_activity:time_callback()
  printf("TIME CALLBACK CALLED")
  self.state = state_sound
  self:update()
end
function action_remark_activity:update()
--	log("action_remark_activity[%s]update: state %s",self.object:name(),self.state)
	-- . Все дела уже закончены
	if self.action_end_signalled then
		state_mgr.set_state(self.object, self.st.anim, nil, nil, self:get_target(), { animation = self.st.anim_reset })
		return
	end
  --' 1. Мы должны повернуться на объект.
  --printf("REMARK: [%s] state[%s]", self.object:name(), self.state)
  if self.state == state_initial then
    local cb = { obj = self, func = self.time_callback, turn_end_func = self.turn_end_callback }
    local synsound
    if self.st.snd_anim_sync == true then
      synsound = self.st.snd
    else
      synsound = nil
    end
    local target = self:get_target()
    if target == nil then
      return
    end

    state_mgr.set_state(self.object, self.st.anim, cb, 0, target, { animation = self.st.anim_reset }, synsound)
    self.state = state_animation

  --' Ожидание колбека от стейтменеджера
  elseif self.state == state_animation then

  --' 2. Мы должны отыграть фразу.
  elseif self.state == state_sound then
    --' Должны выдать сигнал anim_end
    if self.anim_end_signalled == false then
      self.anim_end_signalled = true
      self.st.signals["anim_end"] = true
    end
	self.state = state_finish
	if sound_end_signalled then --// звук уже отыгрывался
		return
	end
	--' Запустить звук
    if self.snd_scheduled == true then
		m_sound.stop_sound_play(self.object)
		if m_sound.set_sound_play(self.object, self.st.snd, true) ~= true then
			--// Rulix: ремарк предполагает строгое проигрывание звука, поэтому пишем
			warning("remark[%s] cannot play sound %s",self.object:name(),self.st.snd)
			self.st.signals["sound_end"] = true
			self.st.signals["theme_end"] = true
		end
    end
  --' 3. Мы должны выдать сигнал об окончании действия
  elseif self.state == state_finish then
	--' Ожидание колбека от звуковой темы
	if self.st.signals["sound_end"] == true then
		if self.sound_end_signalled == false then
			self.sound_end_signalled = true
		end
	end
	if self.sound_end_signalled == true and self.anim_end_signalled == true then
		if self.action_end_signalled == false then
			self.st.signals["action_end"] = true
			self.action_end_signalled = true
		end
	end
  end
  
end
function action_remark_activity:execute()
  action_base.execute(self)

  --' Try to switch to another scheme:
  if xr_logic.try_switch_to_another_section(self.object, self.st) then
    return
  end
  self:update()
end
function action_remark_activity:finalize()
	log("action_remark_activity[%s]finalize",self.object:name())
	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--remark binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
    printf("DEBUG: add_to_binder [%s]: scheme='%s', section='%s'", npc:name(), scheme, section)
      local operators = {}
      local properties  = {}
    
      local manager = npc:motivation_action_manager()

    properties["need_remark"] = evaluators_id.zmey_remark_base + 1
    properties["state_mgr_logic_active"]     = evaluators_id.state_mgr + 4

    operators["action_remark"] = actions_id.zmey_remark_base + 1

      -- // evaluators
    manager:add_evaluator(properties["need_remark"], this.evaluator_need_remark(storage, "remark_need_remark"))

    local new_action = this.action_remark_activity(storage, "action_remark_activity")
    new_action:add_precondition(world_property(stalker_ids.property_alive, true))
    new_action:add_precondition(world_property(stalker_ids.property_danger,false))
    new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
    new_action:add_precondition(world_property(stalker_ids.property_anomaly,false))
    new_action:add_precondition(world_property(properties["need_remark"], true))
    ai_common.add_common_precondition(new_action)
    new_action:add_effect(world_property(properties["need_remark"], false))
    new_action:add_effect (world_property(properties["state_mgr_logic_active"], false))
    manager:add_action(operators["action_remark"], new_action)

    -- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
    xr_logic.subscribe_action_for_events(npc, storage, new_action)

    new_action = manager:action(actions_id.alife)
    new_action:add_precondition(world_property(properties["need_remark"], false))
end

function initialize_gulag_target(npc, target)
    local gulag = m_gulag.get_npc_gulag(npc)
    local param1, param2 = parse_target(target)
  -- Возможные варианты:
  -- Передана работа в гулаге чувака
  -- Передана работа и идентификатор гулага
  -- Передан патрульный путь и номер вейпоинта.
  -- На выход нужно дать: либо target_id либо target_position
  
  -- Если вторым параметром передано число, то это однозначно патрульный путь.
  local wp_id = tonumber(param2)
  if wp_id then
    return patrol(param1):point(wp_id), nil, true
  end
    if param2 then
        gulag = m_gulag.get_gulag_by_name(param2)
    end
    if gulag then
        return nil, gulag:idNPCOnJob(param1), true
    end
    
    return nil, nil, false
end


-- Включение схемы
function set_scheme(npc, ini, scheme, section, gulag_name)
  printf("DEBUG: set_scheme: scheme='%s', section='%s'", scheme, section)
  local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
  printf("DEBUG: set_scheme: storage assigned")

  st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

  st.snd_anim_sync = cfg_get_bool(ini, section, "snd_anim_sync", npc, false)

  st.snd      = cfg_get_string(ini, section, "snd", npc, false, "", nil)
  if st.snd and not (m_sound_theme.theme[st.snd] and (m_sound_theme.theme[st.snd].scenario or m_sound_theme.theme[st.snd].class_id ~= 'npc')) then
	warning("[%s]:snd theme without signal '%s'",section,st.snd)
  end

  st.anim     = cfg_get_string(ini, section, "anim", npc, false, "", "wait")

  if st.anim == "idle" then
    abort("remark <abort>: object '%s', ai_remark.set_scheme: anim field cannot be [idle]", npc:name())
  end

  st.anim_reset = cfg_get_bool(ini, section, "anim_reset", npc, false, true)

  st.target = cfg_get_string          (ini, section,   "target",          npc, false, "", "nil")
  st.target_id = nil
  st.target_position = nil
    if st.target and st.target ~= "nil" then
      if st.target == "actor" then
        st.target_actor = true
        st.target_init = true
      else
        st.target_actor = false
          local sid = tonumber(st.target)
          if sid then
            st.target_id = id_by_sid(sid)
            if not st.target_id then
              st.target_id = nil                
--            abort("remark <error>: Wrong story id [%s] for [%s] in section [%s].", st.target, npc:name(), section)
            end
            st.target_init = true
          else
            st.target_position, st.target_id, st.target_init = initialize_gulag_target(npc, st.target)
          end
      end
    end     
end