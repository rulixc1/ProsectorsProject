-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:    18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
    self.mbox_mode = 0
    self:InitControls()
    self:InitCallBacks()
end

function main_menu:__finalize()

end

function main_menu:InitControls()
    self:Init(0,0,1024,768)              
    local xml = CScriptXmlInit()
    xml:ParseFile("ui_mm_main.xml")
     
    xml:InitStatic("back_movie", self)
    xml:InitStatic("background", self)
    xml:InitStatic("fire_movie", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self);
    
    self.message_box = CUIMessageBoxEx()
    self:Register(self.message_box, "msg_box")    
    
    local _ver = xml:InitStatic        ("static_version",self)
    local _a = xml:InitStatic        ("static_authors",self)
    local mm                        = _G.main_menu.get_main_menu()
    _ver:SetText                    (mm:GetGSVer())
    _a:SetText                        (mm:GetProsectors())
end

function main_menu:Show(f)
    self.shniaga:SetVisibleMagnifier(f)
end


function main_menu:InitCallBacks()
    -- new game
    self:AddCallback("btn_novice",        ui_events.BUTTON_CLICKED,                self.OnButton_new_novice_game,        self)
    self:AddCallback("btn_stalker",        ui_events.BUTTON_CLICKED,                self.OnButton_new_stalker_game,        self)
    self:AddCallback("btn_veteran",        ui_events.BUTTON_CLICKED,                self.OnButton_new_veteran_game,        self)
    self:AddCallback("btn_master",        ui_events.BUTTON_CLICKED,                self.OnButton_new_master_game,        self)
    self:AddCallback("btn_spawn",        ui_events.BUTTON_CLICKED,                self.OnButton_load_spawn,            self)
    -- options                                                                                                            
    self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,                self.OnButton_options_clicked,        self)
    -- load                                                                                                                
    self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,                self.OnButton_load_clicked,            self)
    -- save                                                                                                                
    self:AddCallback("btn_save",        ui_events.BUTTON_CLICKED,                self.OnButton_save_clicked,            self)
    -- multiplayer                                                                                                        
--    self:AddCallback("btn_multiplayer", ui_events.BUTTON_CLICKED,                self.OnButton_multiplayer_clicked,    self)
    -- quit                                                                                                                
    self:AddCallback("btn_quit",        ui_events.BUTTON_CLICKED,                self.OnButton_quit_clicked,            self)
    self:AddCallback("btn_quit_to_mm",    ui_events.BUTTON_CLICKED,                self.OnButton_disconnect_clicked,    self)
    self:AddCallback("btn_ret",            ui_events.BUTTON_CLICKED,                self.OnButton_return_game,            self)
    self:AddCallback("btn_lastsave",    ui_events.BUTTON_CLICKED,                self.OnButton_last_save,            self)
    self:AddCallback("btn_credits",        ui_events.BUTTON_CLICKED,                self.OnButton_credits_clicked,        self)
    -- message box                                                                                                        
    self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_OK_CLICKED,        self.OnMsgOk,                        self)
    self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_CANCEL_CLICKED,    self.OnMsgCancel,                    self)
    self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_YES_CLICKED,        self.OnMsgYes,                        self)
    self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_NO_CLICKED,        self.OnMsgNo,                        self)
    self:AddCallback("msg_box",            ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,                self)
    self:AddCallback("msg_box",            ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,    self.OnMessageQuitWin,                self)
end
function main_menu:OnMsgOk()
    self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
    self.mbox_mode = 0
end

function main_menu:OnMsgYes()
    
    if     self.mbox_mode == 1 then
        self:LoadLastSave()    
    end

    self.mbox_mode = 0
end

function main_menu:OnMsgNo()
    self.mbox_mode = 0
end

function main_menu:LoadLastSave()
    local                    console = get_console()
    console:execute            ("main_menu off")
    console:execute            ("load_last_save")
end

function main_menu:OnButton_last_save()
    if (alife() == nil) then
        self:LoadLastSave();
        return
    end
    
    self.mbox_mode            = 1
    self.message_box:Init    ("message_box_confirm_load_save")
    self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
--    local console = get_console()
--    console:execute("main_menu off")
    game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
    self.message_box:Init("message_box_quit_windows")
    self:GetHolder():start_stop_menu(self.message_box, true)
end


function main_menu:OnButton_disconnect_clicked()
    self.message_box:Init("message_box_quit_game")
    
    if (level.game_id() ~= 1) then        
        self.message_box:SetText("ui_mm_disconnect_message")    -- MultiPlayer
    else
        self.message_box:SetText("ui_mm_quit_game_message")        -- SinglePlayer
    end
    self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
    local console = get_console()
    console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
    local console = get_console()
    console:execute("quit")
end

function main_menu:OnButton_return_game()
    local console = get_console()
    console:execute("main_menu off")
end

function main_menu:OnButton_new_novice_game()
    local console = get_console()
    console:execute("g_game_difficulty gd_novice")
    self:StartGame()    
end

function main_menu:OnButton_new_stalker_game()
    local console = get_console()
    console:execute("g_game_difficulty gd_stalker")
    self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
    local console = get_console()
    console:execute("g_game_difficulty gd_veteran")
    self:StartGame()
end

function main_menu:OnButton_new_master_game()
    local console = get_console()
    console:execute("g_game_difficulty gd_master")
    self:StartGame()
end

function main_menu:StartGame()
    local console = get_console()
    
    if (alife() ~= nil) then
        console:execute    ("disconnect")    
    end
    
    console:execute("start server(all/single/alife/new) client(localhost)")
    console:execute("main_menu off")
end

function main_menu:OnButton_load_spawn()
    if self.spawn_dlg == nil then
        self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
        self.spawn_dlg.owner = self
    end
    
    self:GetHolder():start_stop_menu(self.spawn_dlg, true)
    self:GetHolder():start_stop_menu(self, true) --new
    self:Show(false)
end

function main_menu:OnButton_save_clicked()
    if self.save_dlg == nil then
        self.save_dlg = ui_save_load_dialog.save_dialog()
        self.save_dlg.owner = self
    end
    
    self:GetHolder():start_stop_menu(self.save_dlg, true)
    self:GetHolder():start_stop_menu(self, true) --new
    self:Show(false)
end

function main_menu:OnButton_options_clicked()
    if self.opt_dlg == nil then
        self.opt_dlg = ui_mm_opt_main.options_dialog()
        self.opt_dlg.owner = self
    end
    
    self.opt_dlg:UpdateControls()
    self:GetHolder():start_stop_menu(self.opt_dlg, true)
    self:GetHolder():start_stop_menu(self, true) --new
    self:Show(false)
end

function main_menu:OnButton_load_clicked()
    if self.load_dlg ==nil then
        self.load_dlg = ui_save_load_dialog.load_dialog()
        self.load_dlg.owner = self
    end
    
    self:GetHolder():start_stop_menu(self.load_dlg, true)
    self:GetHolder():start_stop_menu(self, true) --new
    self:Show(false)
end

function main_menu:OnKeyboard(dik, keyboard_action)
    CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
    local console = get_console()
    
    if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
        if dik == DIK_keys.DIK_ESCAPE then
            if is_level_loaded() then
                console:execute("main_menu off")
            end
        end
        
        if dik == DIK_keys.DIK_Q then
            self:OnMessageQuitWin()
        end
        
        if dik == DIK_keys.DIK_NUMPAD1 then --// печатаем флажок ошибки изолированной от системы дебага функцией
            if _G.watchdog then log1(make_string('WATCHDOG = %s', _G.watchdog)) end
        end
        --******************** FIX Nazgool ********************
        if not PROSECTORS_DEBUG then return true end--// Karlan: для общего лока дебагового функционала
        
        if dik == DIK_keys.DIK_U then
            debug.reboot('ui_main_menu')
        end
        
        if dik == DIK_keys.DIK_T and run_personal_test then -- запуск теста из "_personal_test.lua"
            run_personal_test()
        end
		
        if is_level_loaded() and dik == DIK_keys.DIK_F1 and ui_cheat_main then
            ui_cheat_main.start_menu(self)
        end
		
        if dik == DIK_keys.DIK_F11 and debug_ai then
            debug_ai.pnear()
        end
		
        if dik == DIK_keys.DIK_P then
            debug.g_spy:print_stat()
        end
		
        if is_level_loaded() and _sdata then
            if dik == DIK_keys.DIK_I then -- запуск показа координат из "_debug_pos.lscript"
                _sdata.switch_show_sdata()
            end
        
            if _sdata.SDATA_ON then -- изменять можно только когда включено отображение
                if dik == DIK_keys.DIK_NUMPAD7 then
                    _sdata.switch_show_pos()
                end
            
                if dik == DIK_keys.DIK_NUMPAD8 then
                    _sdata.switch_show_zone()
                end

                if dik == DIK_keys.DIK_NUMPAD9 then
                    _sdata.switch_show_rel()
                end
                
                if dik == DIK_keys.DIK_NUMPAD4 then
                    _sdata.switch_show_param()
                end
            end
            
            if dik == DIK_keys.DIK_INSERT then --// Karlan->Nazgool: это для поинтов сделал, потом возможно стоит сообразить какой-то инструмент для создания в логе полного пути
                print('-- save wp -------')
                print(os.time(), actor.level_name)
                local pi = _sdata.SDATA_POS_TBL
                -- local txt = string.format("[__]\\npoints = p0\\np0:name = name00\\np0:position = %f,%f,%f\\np0:game_vertex_id = %.0f\\np0:level_vertex_id = %.0f", pi.x, pi.y, pi.z,pi.gv,pi.lv)
                local txt = string.format("position = %f,%f,%f\\ndirection = %f,%f,%f\\n\\ngame_vertex_id = %.0f\\ndistance = 2.1\\nlevel_vertex_id = %.0f",pi.x,pi.y,pi.z,pi.dir.x,pi.dir.y,pi.dir.z,pi.gv,pi.lv)
                txt = txt:gsub('\\n','\n')
                print(txt)
                print('-- end save wp -------')
            end
            if dik == DIK_keys.DIK_PAUSE then
                print('-- save pos -------')
                -- нужно ролучить только первое значение из функции "gsub", поэтому печатать через локальную
                print(os.time(), actor.level_name)
                local txt = _sdata.SDATA_POS_TEXT:gsub('\\n','\n')
                print(txt)
                print('-- end save pos ---')
            end
        end
        --*************** END FIX Nazgool *********************
    end
    return true
end
