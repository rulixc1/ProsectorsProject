--[[ ----------------------------------------------------------------------------------------------
 File       : ai_gl.script
 Description: Схема использования подствольного гранатомёта
 Copyright  : 2017 © Prosectors Project
 Author(s)  : Rulix aka Bak
 Original   : AI Additions, 8.5.2009, 18.01.2016
--]] ----------------------------------------------------------------------------------------------

_DEBUG_ = false
--local mass_test = true

local launch_actions_permitted = {		-- экшены, с которых разрешено переключение на action_launch_grenade
[stalker_ids.action_combat_planner] = true,
[stalker_ids.action_danger_planner] = true,		-- работа в денжере!
--[actions_id.combat_zombied_base] = true,
--[actions_id.combat_zombied_base+1] = true,
--[actions_id.combat_camper_base] = true,
--[actions_id.combat_camper_base+1] = true,
[actions_id.stohe_camper_base+1] = true,
}
local launch_danger_types = {
[danger_object.entity_attacked]	= true,
[danger_object.attacked]		= true,
[danger_object.enemy_sound]		= true,
[danger_object.attack_sound]	= true,
}

local game_obj = level.object_by_id
local cover_in_direction = level.cover_in_direction
local min_aim_time = 300

local test_res = {}
local active_shells = {}
local config_data = {}
local enemy_memory = {}

local function delete_obj(id)
	local o = sim:object(id)
	if o then
		sim:release(o)
	end
--	table.insert(ids_to_remove,id)
end

local warn_sound
local function warn_actor(npc)
	local gd = level.get_game_difficulty()
	if gd < 1 then
		if not warn_sound then
			warn_sound = sound_object([[device\pda\pda_alarm]])
			warn_sound.volume = 0.9
		end
		if not warn_sound:playing() then
			warn_sound:play_at_pos(actor,vector.zero(),0,sound_object.s2d)
		end
	end
	if gd < 2 then
		level.map_add_object_spot(npc:id(),"rx_gl_hit_sector","")
	end
	if gd < 3 then
		set_alarm_spot()
	end
end

local gl_ini = ini_file([[misc\ai_additions\gl.ltx]])
assert(gl_ini:section_exist("main"),"no gl_ini")
local gl_sets = {forbidden_factions = {},forbidden_npcs = {},
				ranks = {},
				min_dist = cfg_get_number(gl_ini,"main","min_dist",5),
				max_dist = cfg_get_number(gl_ini,"main","max_dist",90),
				check_prd = cfg_get_number(gl_ini,"main","check_period",2000),
				check_prd_c = cfg_get_number(gl_ini,"main","check_period_covert",6000),
				spawn_ammo = cfg_get_bool(gl_ini,"main","spawn_ammo",false)}

for k,v in ipairs(m_ranks.get_rank_list()) do
	gl_sets.ranks[v] = {
	aim = cfg_get_number(gl_ini,v,"aim_time",500)/100,
	reload = math.min(5000,cfg_get_number(gl_ini,v,"reload_time",3200)),
	repose = math.max(1000,cfg_get_number(gl_ini,v,"repose_time",10000)),
	dev = 100-cfg_get_number(gl_ini,v,"accuracy",80)
	}
end
local aim_be_only = cfg_get_bool(gl_ini,"main","aim_be_only",false)
gl_sets.forbidden_factions = parse_list(gl_ini,"main","forbidden_factions",true)
gl_sets.forbidden_npcs = parse_list(gl_ini,"main","forbidden_npcs",true)
gl_ini = nil


class "evaluator_gl_ready" (property_evaluator)		-- определяет, есть ли занятие для схемы, запоминает цели для стрельбы
function evaluator_gl_ready:__init(npc,storage,name) super (nil,name)
	self.st = storage
	self.dbst = db.storage[npc:id()]
	self.check_time = 0
	self.mem_time = 0
	self.st.squad = string.format("%s-%s-%s",npc:team(),npc:squad(),npc:group())	-- не переопределяется при изменении сквада
	ai_common.subscribe_for_events(npc:id(),self)
end
function evaluator_gl_ready:evaluate()
	local npc,stor = self.object,self.st
	local be,tg = npc:best_enemy(),time_global()
	if be and enemy_memory[stor.squad] and self.mem_time < tg and npc:memory_time(be)+1500 > tg and IsStalker(be) then
		local mtime = be:is_actor() and 30000 or 20000
		enemy_memory[stor.squad][be:id()] = {be:position(),be:level_vertex_id(),tg+mtime}
		self.mem_time = tg+1000
	end
	if self.check_time > tg then
		return false
	end
	local res,ammo = check_ammo(npc)
	stor.gl_ready = res
	stor.can_fire = false
	if res then	-- основное условие - наличие гранатомёта и гранат
		stor.ammo = ammo
		if stor.charged then
			if be and not ai_wounded.is_wounded(be) then
				stor.can_fire = true
			elseif not be and self.dbst.danger_flag then
				stor.can_fire = true
			else
				res = false	-- врагов нет - расходимся
			end
		end
	else
		self.check_time = tg+(be and 2000 or 10000)
	end
	return res
end
function evaluator_gl_ready:hit_callback(amount,dir,who,bone_id)
	local npc = self.object
	if enemy_memory[self.st.squad] and bone_id ~= 0 and math.random() < 0.3 and who and who:alive() and IsStalker(who) and npc:relation(who) == game_object.enemy and not ai_combat_ignore.is_ignored(npc,who) then
		enemy_memory[self.st.squad][who:id()] = {who:position(),who:level_vertex_id(),time_global()+30000}
	end
end


class "evaluator_launch_grenade" (property_evaluator)
function evaluator_launch_grenade:__init(storage,planner,name) super (nil,name)
	self.st = storage
	self.st.check_time = time_global()+math.random(2000,10000)
	self.covert_time = time_global()+math.random(5000,15000)
	self.planner = planner
end
function evaluator_launch_grenade:evaluate()
	local stor = self.st
	if not stor.can_fire then
		return false
	end
	if not enemy_memory[stor.squad] then
		enemy_memory[stor.squad] = {}
	end
	if stor.launch then
		if ai_wounded.is_wounded(self.object) then
			stor.launch = nil
			return false
		end
		return true
	end
	local tg = time_global()
	if stor.check_time < tg then
		stor.check_time = tg+gl_sets.check_prd+math.random(500)
		local npc = self.object
		local wpn = npc:active_item()
		if wpn and wpn:is_weapon_magazined() and npc:weapon_unstrapped() and launch_actions_permitted[self.planner:current_action_id()] == true and wpn:get_ammo_in_magazine() ~= 0 and not npc:critically_wounded() and not ai_wounded.is_wounded(npc) then
			local target
			local be = npc:best_enemy()
			if be and (npc:see(be) or self.covert_time > tg or not safe_to_reload(npc,self)) then
--				debug.g_spy:start("pick_visible_target")
				target = pick_visible_target(npc,get_shell_radius(stor.ammo))
--				debug.g_spy:finish("pick_visible_target")
				if target then
					-- все хорошо - пробуем
					stor.covert = false
					stor.launch = true
					stor.target = target:id()
					return true
				end
			elseif self.covert_time < tg then
--				debug.g_spy:start("pick_covert_target")
				target,stor.target_lvid = pick_covert_target(npc,get_shell_radius(stor.ammo),stor.squad,config_data[wpn:section()].vel)
--				debug.g_spy:finish("pick_covert_target")
				self.covert_time = tg+gl_sets.check_prd_c+math.random(1000)
				if target then
					-- все хорошо - пробуем
					stor.covert = true
					stor.launch = true
					stor.target = target
					return true
				end
			end
		end
	end
	return false
end


class "action_launch_grenade" (action_base)
function action_launch_grenade:__init (storage,name) super (nil,name)
	self.st = storage
end

function action_launch_grenade:initialize()
	action_base.initialize(self)
	local npc,wpn,st = self.object,self.object:active_item(),self.st
	if not wpn then
		self:cancel(2500,true)
		return
	elseif wpn:get_ammo_in_magazine() == 0 then
		wpn:set_ammo_elapsed(1)
	end
	npc:set_desired_direction()
	npc:set_mental_state(anim.danger)
	npc:set_item(object.aim1,wpn)
	local dir
	if st.covert then
		self.target_point = st.target
		dir = vector():sub(self.target_point,npc:center())
		npc:set_desired_position()
		npc:set_movement_type(move.stand)
		-- correct aim
		local dist = dir:magnitude()	--self.target_point:distance_to(npc:center())
		self.fixd = dist > 80 and 40
		if st.target_lvid then
			local c_back = 1-cover_in_direction(st.target_lvid,dir)
			if c_back > 0.75 and math.abs(dir.y) < dist/6 then
				local c_front = 1-cover_in_direction(st.target_lvid,vector():invert(dir))
				local cor = math.max(0.5,c_back-c_front)
				self.target_point:add(vector():set(0,cor,0))
			end
		end
		-- apply accuracy
		local dev = dist*st.rs.dev
		if dist > 25 and dev < 8000 and math.random() < 0.4 then
			dev = 8000
		end
		if dev > 0 then
			self.target_point:add(vector():set(math.random(-dev,dev)/1000,0,math.random(-dev,dev)/1000))
		end
		local canfire = math_utils.TransferenceAndThrowVelToThrowDir(dir,config_data[wpn:section()].vel,dir)
		if canfire == 0 then
			self:cancel(9000)
			return
		end
	else
		dir = npc:sight_params().m_vector	--npc:direction()
	end
	self.direction = dir
	self.aim_time = 0
	if st.covert then
		self.stage = 0
		self.test_end = time_global()+6000
		self.aim_time = time_global()+2500
		self.launch_pos = npc:bone_position("bip01_head"):add(npc:direction():div(3))
	else
		self.stage = 3
		config_data[wpn:section()].sswitch:play(npc,npc:center())
	end
	self.relax_time = math.random(300,1000)
	ai_common.subscribe_for_events(npc:id(),self)
	state_mgr.lock(npc,true,true)
	local wm = npc:get_wm(true)
	if wm then
		wm:disable()
	end
	-- предупреждение игрока
	if st.target == actor_id then
		warn_actor(npc)
	end
end

function action_launch_grenade:set_direction()
	local npc,tdir = self.object,self.direction
	local at = self.aim_time-time_global()
	if at > 100 then
		local sp = npc:sight_params().m_vector:getP()
		local tp = tdir:getP()
		local dif = sp > tp and sp-tp or tp-sp
		if dif > 0.02 and dif < 1.4 then
			local st = math.max(dif/8,10/at)
			local p = tp > sp and math.min(tp,sp+st) or math.max(tp,sp-st)
			tdir = vector():setHP(tdir:getH(),p)
--			log("[%s]set_direction[%s] dif %s",npc:name(),p,dif)
		end
	end
	npc:set_sight(look.direction,tdir,true)	-- torso_look
end

function action_launch_grenade:execute()
	action_base.execute(self)
	local npc,wpn = self.object,self.object:active_item()
	if not (self.stage and wpn) then
		logc("!action_launch_grenade[%s]:there is a proplem in action manager %s %s %s",npc:character_name(),self.stage,wpn~=nil,self.st.launch)
		return
	end
	if not self.fake_missile then
		local so = npc:object("gl_fake_missile_"..self.st.ammo)
		if so then
			self.fake_missile = so:id()
		else
			self.fake_missile = create_grenade("gl_fake_missile_"..self.st.ammo,npc).id
			return
		end
	end
	if self.movetype then
		npc:set_movement_type(self.movetype)
	end
	if npc:animation_count() ~= 0 then
		self:set_direction()
		return
	end
	local st = self.st
	if st.covert then
		if self.stage == 0 then
			self.test_shell = create_grenade("gl_test_shell_"..st.ammo,npc).id
			self.stage = 1
		elseif self.stage == 1 then
			set_to_launch(npc,self.test_shell,self.target_point,self.launch_pos,config_data[wpn:section()].vel,get_shell_radius(st.ammo),true,self.fixd)
			self.stage = 2
		elseif self.stage == 2 then
			if test_res[self.test_shell] == true then
--				do	-- анимация
					local anim,anim_time
					if npc:body_state() == move.crouch then
						anim,anim_time = "cr_torso_7_draw_0",1200
					else
						anim,anim_time = "norm_torso_7_draw_0",900
					end
					npc:clear_animations()
					npc:add_animation(anim,true)
--				end
				config_data[wpn:section()].sswitch:play(npc,npc:center(),0.25)
				-- предупреждение игрока
				if self.target_point:distance_to(actor:position()) < get_shell_radius(st.ammo)+3 then
					warn_actor(npc)
				end
				self.aim_time = time_global()+math.max(st.rs.aim*50,anim_time)
				self.stage = 3
			elseif not active_shells[self.test_shell] or test_res[self.test_shell] == false then
				self:cancel(3000)
			elseif self.test_end < time_global() then
				self:cancel(3000)
			end
		elseif self.stage == 3 then
			if self.aim_time > time_global() then
			else
				local test = ray_pick(self.launch_pos,self.direction,2.0,rq_target.rqtBoth,npc)
				if test:query_pass() then
					self:cancel(3000)
				else
					set_to_launch(npc,self.fake_missile,self.target_point,self.launch_pos,config_data[wpn:section()].vel,get_shell_radius(st.ammo),false,self.fixd)
					run_shoot_effect(npc,wpn)
					st.check_time = time_global()+st.rs.repose+math.random(1000)+self.relax_time
					self.relax_time = time_global()+self.relax_time
					self.stage = 4
				end
			end
		end
	else------------------------------------------------------------
		if self.stage == 3 then
			local target_obj = game_obj(st.target)
			if not (target_obj and target_obj:alive()) then
				self:cancel(3000)
				return
			end
			local target_lvid = target_obj:level_vertex_id()
			local target_point = target_obj:position()
			local dir = vector():sub(target_point,npc:center())
			-- установка времени прицеливания
			if not self.target_lvid then
				local dist = dir:magnitude()
				if dist < 20 and target_obj:is_monster() then
					self.aim_time = time_global()+min_aim_time
				elseif npc:movement_type() == move.run then
					if dist < 50 then
						self.aim_time = time_global()+min_aim_time
					else
						self.movetype = math.random() < 0.5 and move.walk or move.stand
						npc:set_movement_type(self.movetype)
						self.aim_time = time_global()+math.max(st.rs.aim*dist,min_aim_time)
					end
				elseif math.random() < 0.5 then
					self.movetype = move.stand
					npc:set_movement_type(self.movetype)
					self.aim_time = time_global()+math.max(st.rs.aim*dist*0.75,min_aim_time)
				else
					self.aim_time = time_global()+math.max(st.rs.aim*dist,min_aim_time)
				end
			end
			-- определение направления взгляда
			local canfire = math_utils.TransferenceAndThrowVelToThrowDir(dir,config_data[wpn:section()].vel,dir)
			if canfire == 0 then
				self:cancel(9000)
				return
			end
			-- проверка открытости цели
			local is_graph_avail = not target_obj:is_actor() or level.vertex_position(target_lvid):distance_to_sqr(target_point) < 3
			if not npc:see(target_obj) then
				if cover_in_direction(npc:level_vertex_id(),dir) < 0.2 then
					self:cancel(1000)	-- не стрелять, если зашёл за стену
					return
				elseif not is_graph_avail or cover_in_direction(target_lvid,vector():invert(dir)) < 0.2 then
					self.aim_time = 0
					if self.target_lvid then
						target_lvid = self.target_lvid
						target_point = self.target_point
						dir = self.direction
					end
				end
			end
			if self.aim_time > time_global() then
				if self.aim_time > time_global()+500 and (target_obj:best_enemy() or target_obj:see(npc)) then
					m_sound.set_sound_play(npc,"gl_fire")
				end
			else
				-- расчёт точки выстрела
				local vel = config_data[wpn:section()].vel
				local dist = target_point:distance_to(npc:center())
				if is_graph_avail then
					-- взять упреждение
					if self.target_lvid and target_lvid ~= self.target_lvid and dist > vel/2 then
						local prvp = self.target_point	--level.vertex_position(self.target_lvid)
						local adist = target_point:distance_to(prvp)
						if adist > 0.5 and adist < 5 then
							local alvid = level.vertex_in_direction(target_lvid,vector():sub(target_point,prvp),3*adist*dist/vel)
							local atrgp = level.vertex_position(alvid)
--							adist = atrgp:distance_to(level.vertex_position(target_lvid))
							local adir = vector():sub(atrgp,npc:center())
							math_utils.TransferenceAndThrowVelToThrowDir(adir,vel,adir)
							if cover_in_direction(alvid,vector():invert(adir)) > 0.3 then
								target_lvid = alvid
								target_point = atrgp
								dir = adir
							end
						end
					end
					-- взять поправку по укрытости цели
					local c_back = 1-cover_in_direction(target_lvid,dir)
					if c_back > 0.75 and math.abs(vector():sub(target_point,npc:center()).y) < dist/6 then
						local c_front = 1-cover_in_direction(target_lvid,vector():invert(dir))
						local cor = math.max(0.5,c_back-c_front)
						target_point:add(vector():set(0,cor,0))
					end
				end
				-- применить отклонение по точности
				local dev = math.random() < 0.9 and dist*st.rs.dev or 0
				if npc:movement_type() == move.run then
					dev = dev + 140*dist
				elseif npc:movement_type() == move.walk then
					dev = dev + 20*dist
				end
				if dev > 0 then
					target_point:add(vector():set(math.random(-dev,dev)/1000,0,math.random(-dev,dev)/1000))
				end
				local launch_pos = npc:bone_position("bip01_head"):add(npc:direction():div(3))
				local test = ray_pick(launch_pos,dir,2.0,rq_target.rqtBoth,npc)
				if test:query_pass() then
					self:cancel(2000)
				else
					-- к полёту готов
					set_to_launch(npc,self.fake_missile,target_point,launch_pos,vel,get_shell_radius(st.ammo),false,dist > 70 and 40)
					run_shoot_effect(npc,wpn)
					st.check_time = time_global()+st.rs.repose+math.random(1000)+self.relax_time
					self.relax_time = time_global()+self.relax_time
					self.stage = 4
				end
			end
			self.target_lvid = target_lvid
			self.target_point = target_point
			self.direction = dir
		end
	end
	if self.stage == 4 then
		if self.relax_time > time_global() then
		else
			st.charged = write_pstor('gl_charged',false,npc)
			self:cancel()	-- конец
		end
	end
	self:set_direction()
end

function action_launch_grenade:cancel(ms)
	self.st.launch = nil
	self.stage = nil
	if ms then
		self.st.check_time = time_global()+ms
	end
end

function action_launch_grenade:finalize()
    action_base.finalize(self)
	local npc = self.object
	if self.test_shell then
		if active_shells[self.test_shell] then
			delete_obj(self.test_shell)
			active_shells[self.test_shell] = nil
		end
		test_res[self.test_shell] = nil
		self.test_shell = nil
	end
	level.map_remove_object_spot(npc:id(),"rx_gl_hit_sector")
	remove_alarm_spot()
	if not npc:alive() then
		return
	end
	ai_common.unsubscribe_from_events(npc:id(),self)
	npc:get_stalker():transfer_combat()
	local wm = npc:get_wm(true)
	if wm then
		wm:enable()
	end
	self:cancel()
	npc:clear_animations()
	npc:set_sight(look.direction,npc:direction(),0)
	npc:set_item(object.idle,npc:active_item())
	state_mgr.lock(npc,false)
	self.movetype = nil
	self.direction = nil
	self.fake_missile = nil
	self.target_point = nil
	self.target_lvid = nil
end
function action_launch_grenade:hit_callback()	-- при хите сразу пуляем и кончаем без задержки
	if self.st.launch and self.fake_missile and self.target_point then
		self.target_point:add(vector():set(math.random(-800,800)/100,0,math.random(-800,800)/100))
		if self.stage < 3 then
			self.stage = 3
		end
		self.aim_time = 0
		self.relax_time = 0
	end
end


class "evaluator_reload_gl" (property_evaluator)
function evaluator_reload_gl:__init(npc,storage,name) super (nil,name)
	self.st = storage
	self.wait = time_global()+math.random(3000)
	self.evn = false
	ai_common.subscribe_for_events(npc:id(),self)
end
function evaluator_reload_gl:evaluate()
	if not self.st.gl_ready or self.st.charged then
		return false
	end
	if self.wait > time_global() then
		return self.evn
	end
	local npc = self.object
	if not (npc:critically_wounded() or npc:mental_state() == anim.panic or npc:is_talking() or self.storage:property(stalker_ids.property_danger_grenade)) then
		return safe_to_reload(npc,self)
	end
	self.evn = false
	self.wait = time_global()+3000
	return false
end
function evaluator_reload_gl:hit_callback(amount)
	self.evn = false
	self.wait = time_global()+5000+amount*10000
end


class "action_reload_gl" (action_base)
function action_reload_gl:__init (npc,storage,name) super (nil,name)
	self.st = storage
	self.st.charged = read_pstor('gl_charged',true,npc)
end
function action_reload_gl:initialize()
	action_base.initialize(self)
	local npc = self.object
	self.bstate = npc:body_state()
	if self.bstate ~= move.crouch and not npc_in_cover(npc) then
		self.bstate = move.crouch
		npc:set_body_state(self.bstate)
		npc:set_mental_state(anim.danger)
	end
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_movement_type(move.stand)
	if npc:best_enemy() and not ai_wounded.is_wounded(npc:best_enemy()) and not npc_in_cover(npc) then
		npc:set_sight(npc:best_enemy(),true,true)
	else
		npc:set_sight(look.direction,npc:direction())
	end
	state_mgr.lock(npc,true)
	npc:set_item(object.idle,npc:active_item())
	npc:set_mental_state(anim.danger)
	self.end_time = time_global()+self.st.rs.reload
	local wm = npc:get_wm(true)
	if wm then
		wm:disable()
	end
end
function action_reload_gl:execute()
	action_base.execute(self)
	local npc,anim = self.object
--	npc:set_movement_type(move.stand)
	local wpn = npc:active_item()
	if self.play then
		if self.end_time <= time_global() then
			self.st.charged = write_pstor('gl_charged',true,npc)
		end
	else
		if not npc:weapon_unstrapped() then
			npc:set_item(object.idle,wpn)
			return
		end
		if self.bstate == move.crouch then
			anim = "cr_torso_3_reload_0"
		else
			anim = "norm_torso_3_reload_0"
		end
		if wpn then
			npc:add_animation(anim,true)
			config_data[wpn:section()].sreload:play(npc,npc:center(),math.max(0.3,math.min(3,self.st.rs.reload/1000)-1))
		end
		self.play = true
	end
end
function action_reload_gl:finalize()
    action_base.finalize(self)
	local npc = self.object
	if not npc:alive() then
		return
	end
	if self.end_time <= time_global()+self.st.rs.reload/2 then
		self.st.charged = write_pstor('gl_charged',true,npc)
	end
	npc:clear_animations()
	state_mgr.lock(npc,false)
	npc:get_stalker():transfer_combat()
	self.play = nil
	self.end_time = nil
	local wm = npc:get_wm(true)
	if wm then
		wm:enable()
	end
end

function safe_to_reload(npc,st)
	local be = npc:best_enemy()
	local tg = time_global()
	local enemies,tt = {},{}
	if be and not ai_wounded.is_wounded(be) then
		enemies[1] = be
		tt[be:id()] = true
	else
		st.evn = true
		st.wait = tg+2000
		return true
	end
	for o in npc:memory_visible_objects() do
		local obj = o:object()
		local id = obj:id()
		if id == actor_id and obj:alive() and npc:relation(obj) == game_object.enemy and actor_aiming_at_me(npc) and cover_in_direction(npc:level_vertex_id(),vector():invert(device().cam_dir)) > 0.1 then
			st.evn = false
			st.wait = tg+2000
			return false
		elseif not tt[id] then
			if obj and obj:alive() and obj:is_enemy(npc) and not (obj:is_stalker() and ai_wounded.is_wounded(obj)) then
				table.insert(enemies,obj)
			end
		end
	end
	local npc_lvid = npc:level_vertex_id()
	local f = 20
	for i,enemy in ipairs(enemies) do
		local dir = enemy:position():sub(npc:position())
		local dist = dir:magnitude()
		local cover = cover_in_direction(npc_lvid,dir)
		if dist < 10 or enemy:see(npc) and (dist < 30 or cover > 0.6 or dist*cover > dist-f*cover) then		-- чем дальше враг, тем меньше требуется прикрытия
			st.evn = false
			st.wait = tg+2500
			return false
		end
	end
	st.evn = true
	st.wait = tg+500
	return true
end

function get_shell_radius(sec)
	if not config_data[sec] then
		local fake = sini:r_string(sec,"fake_grenade_name")
		local br = cfg_get_number(sini,fake,"blast_r",10)
		local fc = cfg_get_number(sini,fake,"frags",5)
		local fr = cfg_get_number(sini,fake,"frags_r",15)
		config_data[sec] = math.max(br,math.min(fc^0.7,fr))	-- если осколков мало, то бояться их особо не стоит
	end
	return config_data[sec]
end

function check_weapon(wpn)
	if wpn:get_weapon().grenade_launcher_attached then
		local sec = wpn:section()
		if not config_data[sec] then
			local sound_reload = m_sound.dihud_sound(sec,"snd_reload_grenade")
			local sound_switch = m_sound.dihud_sound(sec,"snd_switch")
			local launcher = cfg_get_string(sini,sec,"grenade_launcher_name")
			if not launcher then
				launcher = sec
			end
			local vel =	cfg_get_number(sini,launcher,"grenade_vel",76)
			local shells = {}
			for i,s in ipairs(parse_list(sini,sec,"grenade_class")) do
				if sini:section_exist("gl_test_shell_"..s) and sini:section_exist("gl_fake_missile_"..s) then
					table.insert(shells,s)
				else
					logc("~not found ai_gl sections for shell [%s]!!!",s)
				end
			end
--			log("read_wpn_params[%s]:vel=[%s],launcher=[%s],sreload=[%s],sswitch=[%s]",sec,vel,launcher,sound_reload,sound_switch)
			config_data[sec] = {shells = shells,vel = vel,sreload = sound_reload,sswitch = sound_switch}
		end
		if #config_data[sec].shells == 0 then
			return false
		end
		return true
	end
	if mass_test then
		config_data[wpn:section()] = {shells = {"ammo_vog-25"},vel = 70,sreload = m_sound.dihud_sound("wpn_lr300","snd_reload_grenade"),sswitch = m_sound.dihud_sound("wpn_lr300","snd_switch")}
		return true
	end
	return false
end

local ready_mem = {}
function check_ammo(npc)	-- проверить наличие оружия и патронов
	local wpn = npc:active_item()
	if not (wpn and wpn:is_weapon_magazined()) then
		return false
	end
	local rm = ready_mem[wpn:id()]
	if rm and rm.t > time_global() then
		return rm.ammo~=nil,rm.ammo
	end
	if check_weapon(wpn) then
		for _,v in ipairs(config_data[wpn:section()].shells) do
			if npc:object(v) then
				ready_mem[wpn:id()] = {ammo = v,t = time_global()+8000}
				return true,v	-- выбрать патрон (первый попавшийся)
			end
		end
		if gl_sets.spawn_ammo then
			local shells = config_data[wpn:section()].shells
			sim:create(shells[math.random(#shells)],npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
			return false
		end
	end
	ready_mem[wpn:id()] = {t = time_global()+12000}
	return false
end

function check_victims(nid,pos,radius,want_enemy)	-- нет ли в радиусе поражения друзей; а враги есть?
	local npc = game_obj(nid)
	if not npc then
		return false
	end
	radius = radius+1
	radius = radius*radius
	if npc:position():distance_to_sqr(pos) < radius then
		return false
	end
	local enemy
	local sst,mst = modules.stype_stalker,modules.stype_mobile
	local stalker = npc:get_stalker()
	for id,t in pairs(db.storage) do
		if (t.stype == sst or t.stype == mst or id == actor_id) and id ~= nid then
			local obj = game_obj(id)
			if obj and obj:alive() then
				if obj:position():distance_to_sqr(pos) < radius then
					if npc:relation(obj) == game_object.enemy then
						if not stalker:is_tolerant(obj) then
							enemy = true
						end
					else
						return false
					end
				end
			end
		end
	end
	if want_enemy then
		return enemy
	else
		return true
	end
end

local function get_friendspos_list(npc)
	local friends,npc_id = {},npc:id()
	local sst = modules.stype_stalker
	for id,t in pairs(db.storage) do
		if (t.stype == sst or id == actor_id) and id ~= npc_id then
			local obj = game_obj(id)
			if obj and obj:alive() and npc:relation(obj) ~= game_object.enemy then
				friends[#friends+1] = obj:center()
			end
		end
	end
	return friends
end
function pick_visible_target(npc,radius)
	radius = radius+3
	local npc_pos = npc:center()
	local min_dist = math.max(gl_sets.min_dist,radius)
	local max_dist = gl_sets.max_dist
	radius,min_dist,max_dist = radius*radius,min_dist*min_dist,max_dist*max_dist
	local friends
	local enemy = npc:best_enemy()
	if enemy:wounded() then
		return
	end
	if npc:see(enemy) then	-- сначала проверяем лучшего врага
		local en_pos = enemy:center()
		local dist = npc_pos:distance_to_sqr(en_pos)
		if dist > min_dist then
			if dist < max_dist then
				friends = get_friendspos_list(npc)
				local cres = true
				for i,fpos in ipairs(friends) do
					if fpos:distance_to_sqr(en_pos) < radius then
						cres = false
						break
					end
				end
				if cres then
					return enemy
				end
			end
		else
			return -- если лучший враг виден и слишком близко для выстрела
		end
	end
	if aim_be_only then
		return
	end
	local enemies,ecnt = npc:get_stalker():enemies()
	if ecnt < 2 then
		return
	end
	local be_id = enemy:id()
	local max_dist_monster = math.min(npc:max_ignore_monster_distance()^2,max_dist)
	for obj,vis in pairs(enemies) do	-- затем всех остальных
		if vis and not ai_wounded.is_wounded(obj) and obj:id() ~= be_id then
			local en_pos = obj:center()
			local dist = npc_pos:distance_to_sqr(en_pos)
			if dist > min_dist and dist < (obj:is_monster() and max_dist_monster or max_dist) then
				local cres = true
				friends = friends or get_friendspos_list(npc)
				for i=1,#friends do
					if friends[i]:distance_to_sqr(en_pos) < radius then
						cres = false
						break
					end
				end
				if cres then
					return obj
				end
			end
		end
	end
end

function pick_covert_target(npc,radius,squad,vel)
	radius = radius+5
	local npc_pos = npc:bone_position("bip01_head")
	local min_dist = math.max(gl_sets.min_dist,radius)
	local max_dist = gl_sets.max_dist
	radius,min_dist,max_dist = radius*radius,min_dist*min_dist,max_dist*max_dist
	local mem = enemy_memory[squad]
	if aim_be_only then
		local enemy = npc:best_enemy()
		local embe = enemy and mem[enemy:id()]
		if embe then
			if embe[3]+10000 > time_global() then
				local pos = embe[1]
				local dist = npc_pos:distance_to_sqr(pos)
				if dist < max_dist and dist > min_dist then
					local dir = vector():sub(pos,npc_pos)
					local reach = math_utils.TransferenceAndThrowVelToThrowDir(dir,vel,dir)
					if reach > 0 then
						local test = ray_pick(npc_pos,dir,4.0,rq_target.rqtBoth,npc)
						if not test:query_pass() then
							for i,fpos in ipairs(get_friendspos_list(npc)) do
								if fpos:distance_to_sqr(pos) < radius then
									return
								end
							end
						end
					end
					return pos,embe[2]
				end
			else
				mem[enemy:id()] = nil
			end
		end
		return
	end
	local friends,pos,dir,dist,obj,reach,cres
	local tg = time_global()
	local test = ray_pick(npc_pos,vector(),4.0,rq_target.rqtBoth,npc)
	for id,t in pairs(mem) do
		if t[3] > tg then
			pos = t[1]
			dist = npc_pos:distance_to_sqr(pos)
			if dist < max_dist and dist > min_dist then
				obj = db.storage[id] and game_obj(id)
				if not (obj and obj:alive() and not ai_wounded.is_wounded(obj)) then
					mem[id] = nil
				else
					dir = vector():sub(pos,npc_pos)
					reach = math_utils.TransferenceAndThrowVelToThrowDir(dir,vel,dir)
					if reach > 0 then
						test:set_direction(dir)
						if not test:query_pass() then
							if not friends then
								friends = get_friendspos_list(npc)
							end
							cres = true
							for i=1,#friends do
								if friends[i]:distance_to_sqr(pos) < radius then
									cres = false
									break
								end
							end
							if cres then
								return pos,t[2]
							end
						end
					end
				end
			end
		else
			mem[id] = nil
		end
	end
	local danger = npc:best_danger()
	if danger and launch_danger_types[danger:type()] then
		obj = danger:object()
		if obj and obj:alive() and npc:is_enemy(obj) and not ai_wounded.is_wounded(obj) then
			local danger_time = tg-danger:time()
			if danger_time > 0 and danger_time < 30000 then
				pos = danger:position()
				dist = npc_pos:distance_to_sqr(pos)
				if dist < max_dist and dist > min_dist then
					dir = vector():sub(pos,npc_pos)
					reach = math_utils.TransferenceAndThrowVelToThrowDir(dir,vel,dir)
					if reach > 0 then
						test:set_direction(dir)
						if not test:query_pass() then
							for i,fpos in ipairs(friends or get_friendspos_list(npc)) do
								if fpos:distance_to_sqr(pos) < radius then
									return
								end
							end
							local lvid = level.vertex_id(pos)
							if lvid == INVALID_LEVEL_VERTEX_ID then
								lvid = obj:level_vertex_id()
							end
							if lvid < INVALID_LEVEL_VERTEX_ID then
								return pos,lvid
							end
						end
					end
				end
			end
		end
	end
end

function run_shoot_effect(npc,wpn)
	if npc:movement_type() ~= move.run then
		local anim
		if npc:body_state() == move.crouch then
			anim = "cr_torso_4_attack_1"
		else
			anim = "norm_torso_4_attack_1"
		end
		npc:clear_animations()
		npc:play_cycle(anim)
	end
	local cwpn = wpn:get_weapon_mwg()
	if cwpn then
		cwpn:play_gl_fire_particles()
		cwpn:play_gl_fire_sound()
	end
end

function set_to_launch(npc,id,target,pos,lvel,radius,test,fixdir)
	local shell = game_obj(id)
	npc:drop_item_and_teleport(shell,pos)
	active_shells[id] = {npc = npc:id(),radius = radius,target = target,lvel = lvel,fix_dir = fixdir and fixdir*fixdir,test = test}
	shell:set_fastcall(trace_shell,shell)
end

local function launch_shell(obj,data)
	local dir = vector():sub(data.target,obj:position())
	local lvel = data.lvel
	local dist = dir:magnitude()
	local tim = dist^1.2/lvel
	data.ltime = time_global()+250
	data.time = data.ltime+tim*1000+1500
	---------------------------
	local canfire = math_utils.TransferenceAndThrowVelToThrowDir(dir,lvel,dir)
--	if canfire == 0 then
--		data.time = 0
--		return 0
--	end
	---------------------------
	local ps = obj:get_physics_shell()
	ps:set_air_resistance(0,0)
	ps:set_dynamic_scales(1,1)
	dir:mul(lvel)
	lvel = dir:magnitude()
	local h = hit()
	h.type = hit.strike
	h.power = 0
	h.impulse = lvel*obj:mass()
	h.draftsman = obj
	h.direction = dir
	obj:hit(h)
--	log("launch_shell[%s]:lvel %s mass %s",obj:name(),data.lvel,obj:mass())
end

local function test_result(data,pos)
	local tres = check_victims(data.npc,pos,data.radius,true)
	return tres or tres == nil and data.target:distance_to(pos) < data.radius+5
end

local function explode_shell(obj)
	local id = obj:id()
	local data = active_shells[id]
	local pos = obj:position()
	if data.test then
		delete_obj(id)
		test_res[id] = test_result(data,pos)
	else
		if check_victims(data.npc,pos,data.radius) then
			obj:explode(data.npc)
		else
			delete_obj(id)
		end
	end
	active_shells[id] = nil
end

local function remove_shell(id)
	delete_obj(id)
	if active_shells[id] and active_shells[id].test then
		test_res[id] = false
	end
	active_shells[id] = nil
end

local function correct_speed(obj,data)
	local ps = obj:get_physics_shell()
	if not ps then
		log("~correct_speed[%s] not ps!!!",obj:name())
		return false
	end
	local vel = vector()
	ps:get_linear_vel(vel)
	local vel_num = vel:magnitude()
	if vel_num < 7 and not data.rel then
		if data.ltime < time_global() then	-- если в течение полусекунды не взлетела, значит упёрлась в препятствие
			data.time = 0					-- просто удаляем
		else
			return false			-- снаряд ещё не запущен
		end
	end
	if data.vel then
		if vel.y == data.vel.y then
			return false			-- скорость не обновилась
		end
		local cos = data.vel and vector():set(vel):normalize():dotproduct(vector():set(data.vel):normalize())
		if cos < 0.99 then
			return true
		elseif cos < 0.9999 and obj:position():distance_to_sqr(data.target) < 6 then
			return true
		end
	end
	data.vel = vel
	return false
end

function trace_shell(obj)
	local id = obj:id()
--	if not sim:object(id) then
--		remove_shell(id)
--		log("![%s]fail sobj!!!!!",id)
--		return true
--	end
	if obj:parent() then
		remove_shell(id)
		log("![%s:%s]fail parent",id,obj:name())
		return true
	end
	local data = active_shells[id]
	if not data then
		log("![%s:%s]not data!",id,obj:name())
		return true
	end
	if not data.launched then
		launch_shell(obj,data)
		data.launched = true
	else
		local trigger = correct_speed(obj,data)
		if trigger then
			explode_shell(obj)
			return true
		elseif data.time < time_global() then
			remove_shell(id)
			return true
		end
--		if data.fix_dir and obj:position():distance_to_sqr(data.target) < data.fix_dir then
--			launch_shell(obj,data)
--			data.fix_dir = nil
--		end
	end
	return false
end

function create_grenade(section,owner)
	local obj = sim:create(section,owner:position(),owner:level_vertex_id(),owner:game_vertex_id(),owner:id())
	obj = sim:object(obj.id)
	obj.m_flags:set(global_flags.flSwitchOnline,	true)
	obj.m_flags:set(global_flags.flSwitchOffline,	false)
	obj.m_flags:set(global_flags.flVisibleForAI,	false)
	obj.m_flags:set(global_flags.flUsefulForAI,		false)
	obj.m_flags:set(global_flags.flUsedAI_Locations,false)
	obj.m_flags:set(global_flags.flCanSave,			false)
	return obj
end
----------------------------------------------------------------------------------------------------------------------
-- ALARM SPOT
----------------------------------------------------------------------------------------------------------------------
local wnd,xml,aspot
local spot_rc = 0

function set_alarm_spot()
	spot_rc = spot_rc+1
	if not wnd then
		wnd = CUIScriptWnd()
		get_hud():AddDialogToRender(wnd)
		xml = CScriptXmlInit()
		xml:ParseFile("grenade_mark.xml")
	end
	if not aspot then
		aspot = xml:InitStatic("alarm_spot",wnd)
	end
end

function remove_alarm_spot()
	spot_rc = spot_rc > 0 and spot_rc-1 or 0
	if aspot and spot_rc == 0 then
		wnd:DetachChild(aspot)
		aspot = nil
	end
end

function remove_spots()
	if wnd then
		get_hud():RemoveDialogToRender(wnd)
	end
end
----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function init()
	event("presets"):register(presets)
end
function presets()
	event("npc_spawn"):register(add_to_binder)
	event("actor_destroy"):register(remove_spots)
end

local evid_gl_ready = evaluators_id('gl_ready')
local evid_gl_fire = evaluators_id('gl_fire',false)
local evid_gl_reload = evaluators_id('gl_reload',false)
local actid_gl_fire = actions_id('gl_fire')
local actid_gl_reload = actions_id('gl_reload')

launch_actions_permitted[actid_gl_reload] = true

function add_to_binder(t)
	local npc = t.obj
	local manager = t.st.planner
	local storage = t.st.ai('grenade_launch')
	storage.rs = gl_sets.ranks[m_ranks.get_obj_rank_name(npc)]
	-- Evaluators
	if gl_sets.forbidden_factions[npc:character_community()] or gl_sets.forbidden_npcs[npc:name()] or gl_sets.forbidden_npcs[npc:profile_name()] then
		manager:add_evaluator	(evid_gl_ready,property_evaluator_const(false))
		manager:add_evaluator	(evid_gl_fire,property_evaluator_const(false))
		manager:add_evaluator	(evid_gl_reload,property_evaluator_const(false))
		return
	end
	manager:add_evaluator		(evid_gl_ready,evaluator_gl_ready(npc,storage,"eva_gl_ready"))
	manager:add_evaluator		(evid_gl_fire,evaluator_launch_grenade(storage,manager,"eva_launch_grenade"))
	manager:add_evaluator		(evid_gl_reload,evaluator_reload_gl(npc,storage,"eva_reload_gl"))
	-- Actions
	local wp = world_property
	local action = action_launch_grenade(storage,"act_launch_grenade")
	action:add_precondition		(wp(evaluators_id.sidor_wounded_base,false))
	if evaluators_id.bandage then
		action:add_precondition	(wp(evaluators_id.bandage,false))
	end
	if evaluators_id.facer then
		action:add_precondition	(wp(evaluators_id.facer,false))
	end
	if evaluators_id.grenade_evade then
		action:add_precondition	(wp(evaluators_id.grenade_evade,false))
	end
	action:add_precondition		(wp(evid_gl_ready,true))
	action:add_precondition		(wp(evid_gl_fire,true))
	action:add_effect			(wp(evid_gl_fire,false))
	manager:add_action			(actid_gl_fire,action)
	------------------------------------------------------------------------------------
	action = action_reload_gl(npc,storage,"act_reload_gl")
	action:add_precondition		(wp(evaluators_id.sidor_wounded_base,false))
	action:add_precondition		(wp(stalker_ids.property_danger_grenade,false))
	action:add_precondition		(wp(evaluators_id.state_mgr+3,true))
	if evaluators_id.bandage then
		action:add_precondition (wp(evaluators_id.bandage,false))
	end
	if evaluators_id.facer then
		action:add_precondition	(wp(evaluators_id.facer,false))
	end
	if evaluators_id.help_wounded then
		action:add_precondition (wp(evaluators_id.help_wounded,false))
	end
	if evaluators_id.grenadier then
		assert(evaluators_id.grenade_evade and evaluators_id.grenade_psyh)
		action:add_precondition	(wp(evaluators_id.grenadier,false))
		action:add_precondition	(wp(evaluators_id.grenade_evade,false))
		action:add_precondition	(wp(evaluators_id.grenade_psyh,false))
	end
	action:add_precondition		(wp(evid_gl_ready,true))
	action:add_precondition		(wp(evid_gl_reload,true))
	action:add_effect			(wp(evid_gl_reload,false))
	manager:add_action			(actid_gl_reload,action)
	-- включение в планировщик
	for i,id in ipairs{actions_id.alife,stalker_ids.action_combat_planner,stalker_ids.action_danger_planner} do
		action = manager:action(id)
		action:add_precondition	(wp(evid_gl_fire,false))
		action:add_precondition	(wp(evid_gl_reload,false))
	end
end
