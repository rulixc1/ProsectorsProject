--[[ ----------------------------------------------------------------------------------------------
 File       : ai_bandage.script
 Description: Схема самолечения
 Copyright  : 2017 © Prosectors Project
 Author(s)  : Rulix aka Bak
 Original   : AI Additions, 21.7.2009, 08.01.2016, 11.10.2016
--]] ----------------------------------------------------------------------------------------------

--// Animations
local animst = {
bandage = { {a = "norm_torso_12_draw_0",t = 400},{a = "norm_torso_12_attack_0",t = 3600},{a = "norm_torso_12_holster_0",t = 250} }, --,{a = "norm_torso_12_reload_0",t = 600}
medkit = { {a = "dmg_norm_torso_11_draw_0",t = 600},{a = "dmg_norm_torso_11_attack_0",t = 4300},{a = "dmg_norm_torso_11_holster_0",t = 250} }, --,{a = "dmg_norm_torso_11_holster_reload_0",t = 600}
pills = { {a = "cr_raciya_0_draw_0",t = 750},{a = "cr_raciya_0_draw_1",t = 900},{a = "cr_raciya_0_hide_0",t = 600} },
drink = { {a = "idle_0_to_sit_2",t = 2350},{a = "vodka_3",t = 3650},{a = "sit_2_to_idle_0",t = 550},crouch = {{a = "vodka_3",t = 3800}}} ,
}

--// Initialize parameters
local bg_ini = ini_file([[misc\ai_additions\bandage.ltx]])
assert(bg_ini:section_exist("default"),"no bg_ini")
bandage_sets = {}
bandage_sets.spawn_mt = cfg_get_number(bg_ini,"main","spawn_medkits_time",120)*1000
bandage_sets.spawn_bt = cfg_get_number(bg_ini,"main","spawn_bandages_time",60)*1000
bandage_sets.max_h = cfg_get_number(bg_ini,"main","medkit_health",50)/100
bandage_sets.min_b = cfg_get_number(bg_ini,"main","bandage_bleeding",0.2)
bandage_sets.medkits = collect_sections(bg_ini,{"medkits"},nil,true,true)
bandage_sets.bandages = collect_sections(bg_ini,{"bandages"},nil,true,true)
bandage_sets.anims = collect_sections(bg_ini,{"animation"},function(n) return animst[n] end)
bandage_sets.forbidden_factions = parse_list(bg_ini,"main","forbidden_factions",true)
bandage_sets.forbidden_npcs = collect_sections(bg_ini,{"forbidden_npcs"},nil,true)

local profiles = {}
local function read_profile(section)
	if not bg_ini:section_exist(section) or bg_ini:line_count(section) == 0 then
		return profiles.default
	end
	if not profiles[section] then
		profiles[section] = {
		spawn_m = parse_list(bg_ini,section,"spawn_medkits"),
		spawn_b = parse_list(bg_ini,section,"spawn_bandages"),
		infinite = cfg_get_bool(bg_ini,section,"infinite") or nil,
		disabled = not cfg_get_bool(bg_ini,section,"enabled") or nil,
		}
	end
	return profiles[section]
end
read_profile('default')
----------------------------------------------------------------------------------------------------------------------
-- EVALUATOR
----------------------------------------------------------------------------------------------------------------------
class "evaluator_bandage" (property_evaluator)
function evaluator_bandage:__init(npc,storage,name) super (nil,name)
	local tg = time_global()
	storage.spawn_time_b = bandage_sets.spawn_bt ~= 0 and tg+bandage_sets.spawn_bt+math.random(8000) or nil
	storage.spawn_time_m = bandage_sets.spawn_mt ~= 0 and tg+bandage_sets.spawn_mt+math.random(8000) or nil
	self.hitt = tg+math.random(4000,6000)
	self.st = storage
	self.dbst = db.storage[npc:id()]
	ai_common.subscribe_for_events(npc:id(),self)
end
function evaluator_bandage:evaluate()
	local npc = self.object
	if self.hitt > time_global() then
		return false
	end
	if self.st.action then		-- пока работает экшн, нас ничего не интересует, кроме укрытия
		if npc_in_cover(npc) then
			return true
		end
		self.hitt = time_global()+1000
		return false
	elseif self.st.fin then		-- после завершения экшена отключаемся на время
		self.hitt = time_global()+5000
		self.st.fin = nil
		return false
	end
	local wound,bleed = npc.health < bandage_sets.max_h,npc:get_bleeding() > bandage_sets.min_b
	if not (wound or bleed) then			-- если лечиться не нужно
		self.hitt = time_global()+5000
		return false
	end
--	assert(self.st.pr,"evaluator_bandage[%s:%s]: no pr, profile %s",npc:name(),npc:character_name(),self.st.current_profile)
	if self.st.pr.disabled then				-- текущий профиль запрещает лечиться
		self.hitt = time_global()+7000
		return false
	end
	if npc:best_enemy() then
		local wpn = npc:active_item()
		if wpn and wpn:get_ammo_in_magazine() == 0 then
			return false
		end
	elseif self.dbst.active_scheme == "remark" then
		self.hitt = time_global()+5000
		return false
	end
	if string.find(state_mgr.get_state(npc),"wounded") or ai_wounded.is_wounded(npc) then
		if not self.dbst.wounded.wound_manager.cover or self.dbst.wounded_already_selected then
			self.hitt = time_global()+10000
			return false
		elseif npc:movement_type() ~= move.stand then
			return false	-- ждем, когда доберется до укрытия
		end
	end
	local medkit = self.st.medkit and npc:object(self.st.medkit)
	if not medkit then
		if wound then					-- в первую очередь смотрим аптечки
			for k,v in ipairs(bandage_sets.medkits) do
				medkit = npc:object(v)
				if medkit then
					self.st.medkit = v
					break
				end
			end
			if not (medkit or spawn_medkit(npc,self.st)) then
				self.hitt = time_global()+6000
			end
		end
		if not medkit and bleed then	-- если нет аптечки, но нужна перевязка - ищем бинты
			for k,v in ipairs(bandage_sets.bandages) do
				medkit = npc:object(v)
				if medkit then
					self.st.medkit = v
					break
				end
			end
			if not (medkit or spawn_bandage(npc,self.st)) then
				self.hitt = time_global()+4000
			end
		end
		if not medkit then				-- если аптечка не найдена
			self.st.medkit = nil
			return false
		end
	end
	if actions_id.gl_reload and self.dbst.planner:current_action_id() == actions_id.gl_reload then
		self.hitt = time_global()+1500
		return false
	end
	if not npc_in_cover(npc,true) then	-- ждём когда окажемся в укрытии
		return false
	end
	return true
end
function evaluator_bandage:hit_callback()
	self.hitt = time_global()+5000
end
----------------------------------------------------------------------------------------------------------------------
--ACTION
----------------------------------------------------------------------------------------------------------------------
class "action_bandage" (action_base)
function action_bandage:__init (storage,name) super (nil,name)
	self.st = storage
end
function action_bandage:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_movement_type(move.stand)
	self.crouch_anim_fix = npc:body_state() == move.crouch or nil
	state_mgr.lock(npc,true,true)
	ai_common.subscribe_for_events(npc:id(),self)
	self.enable_torch = nil
	if npc:best_enemy() or db.storage[npc:id()].danger_flag then
		self.enable_torch = false
		sr_light.force_update_light(npc)
	end
end
function action_bandage:execute()
	action_base.execute(self)
	local npc = self.object
	if db.storage[npc:id()].danger_flag then
		local danger = npc:best_danger()
		danger = danger and danger:object()
		if danger then
			npc:set_sight(danger,true,false)
		end
	elseif npc:best_enemy() then
		npc:set_sight(npc:best_enemy(),true,false)
	else
		npc:set_sight(look.direction,npc:direction())
	end
	if not self.st.action then		-- цикл прошёл, но запущен снова без переключения
		if not (self.st.medkit and npc:object(self.st.medkit)) then
			log("act[%s]:restart: not medkit",npc:character_name())
			return
		end
		self.st.action = true
		self.timer = 0
		self.animst = 0
		self.attached = false
		-------------------------------------
		return
	elseif npc:active_item() and not npc:weapon_strapped() then
		if self.can_strap == nil then
			self.can_strap = can_strap(npc)
		end
		if self.can_strap then
			npc:set_item(object.strap,npc:active_item())
		else
			npc:set_item(object.idle,nil)
		end
		return
	end
	-- аттач предметов
	if not self.attached then
		local medkit = self.st.medkit and npc:object(self.st.medkit)
		if medkit then
			medkit:enable_attachable_item(true)
		end
		self.attached = true
	end
	if self.crouch_anim_fix then
		npc:add_animation("cr_torso_0_aim_1")
		self.crouch_anim_fix = nil
		return
	end
	local anims = bandage_sets.anims[self.st.medkit]
	if npc:body_state() == move.crouch and anims.crouch then
		anims = anims.crouch
	end
	if self.timer < time_global() then
		self.animst = self.animst+1
	else
		return
	end
	if anims[self.animst] then
		npc:play_cycle(anims[self.animst].a,true)
		if self.animst == 2 and anims[self.animst].t > 2500 and npc:best_enemy() and not npc:best_enemy():wounded() then
			self.timer = time_global()+anims[self.animst].t-math.max(npc:character_rank()*m_ranks.stalker_rank_unit*1350,300)+300
		else
			self.timer = time_global()+anims[self.animst].t
		end
	else
		local medkit = self.st.medkit and npc:object(self.st.medkit)
		if medkit then
			medkit:enable_attachable_item(false)
			npc:eat(medkit)
			if self.st.pr.infinite then
				sim:create(self.st.medkit,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
			end
		else
			npc.health = 0.5
		end
		self.st.medkit = nil
		self.st.action = nil
		if ai_wounded.is_wounded(npc) then
			ai_wounded.get_wound_manager(npc).actual = false
		end
	end
end
function action_bandage:finalize()
    action_base.finalize(self)
	local npc = self.object
	if not npc:alive() then
		return
	end
	local medkit = self.st.medkit and npc:object(self.st.medkit)
	if medkit then
		medkit:enable_attachable_item(false)
		-- если действие прервано, съедим аптеку
		if self.animst > 2 then
			npc:eat(medkit)
		elseif self.animst > 1 and not ai_wounded.is_wounded(npc) then
			npc.health = 0.1
		end
	end
	ai_common.unsubscribe_from_events(npc:id(),self)
	npc:clear_animations()
	npc:play_cycle("norm_torso_0_idle_1",true)	-- фикс залипания анимации
	state_mgr.lock(npc,false)
	npc:get_stalker():transfer_combat()
	self.can_strap = nil
	self.attached = nil
	self.st.action = nil
	self.st.fin = true
end
function action_bandage:hit_callback(amount)	-- если бинт в руке, можно его выронить
	if self.animst > 1 and self.st.medkit and math.random() < amount*3 and self.object:alive() then
		local npc = self.object
		local item = npc:object(self.st.medkit)
		if item then
			logc("action_bandage[%s]:hit_callback: drop %s",npc:name(),item:name())
			npc:drop_item(item,6)	--npc:drop_item_and_teleport(item,npc:bone_position("bip01_r_hand"))
			if self.st.pr.infinite then
				sim:create(self.st.medkit,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
			end
			self.st.medkit = nil
		end
	end
end

----------------------------------------------------------------------------------------------------------------------
-- static functions
----------------------------------------------------------------------------------------------------------------------
function spawn_medkit(npc,st)
	if st.spawn_time_m and time_global() > st.spawn_time_m then
		st.spawn_time_m = time_global()+bandage_sets.spawn_mt
		if ai_wounded.is_wounded(npc) then
			return
		end
		local pos = math.random(#st.pr.spawn_m)
		sim:create(st.pr.spawn_m[pos],npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
		return true
	end
end

function spawn_bandage(npc,st)
	if st.spawn_time_b and time_global() > st.spawn_time_b then
		st.spawn_time_b = time_global()+bandage_sets.spawn_bt
		if ai_wounded.is_wounded(npc) then
			return
		end
		local pos = math.random(#st.pr.spawn_b)
		sim:create(st.pr.spawn_b[pos],npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
		return true
	end
end

function can_strap(npc)
	if npc:best_enemy() then
		return false
	end
	local wpn = npc:active_item()
	if not state_mgr_weapon.strappable_weapon(wpn) then
		return false
	end
	return true
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function init()
	event("presets"):register(presets)
end
function presets()
	event("npc_spawn"):register(add_to_binder)
	event("activate_by_section"):register(reset_scheme)
end

local evid_bandage = evaluators_id('bandage',false)
local actid_bandage = actions_id('bandage')

function add_to_binder(t)
	local npc = t.obj
	local manager = t.st.planner
	local storage = t.st.ai('bandage')

	if bandage_sets.forbidden_factions[npc:character_community()] or bandage_sets.forbidden_npcs[npc:name()] or bandage_sets.forbidden_npcs[npc:profile_name()] then
		manager:add_evaluator(evid_bandage,property_evaluator_const(false))
		return
	end
	manager:add_evaluator	(evid_bandage,evaluator_bandage(npc,storage,"eva_bandage"))

	local action = action_bandage(storage,"act_bandage")
	action:add_precondition		(world_property(evaluators_id.state_mgr+3,true))
--	if evaluators_id.gl_fire then
--		action:add_precondition	(world_property(evaluators_id.gl_fire,false))
--	end
	if evaluators_id.facer then
		action:add_precondition	(world_property(evaluators_id.facer,false))
	end
	if evaluators_id.grenadier then
		assert(evaluators_id.grenade_evade and evaluators_id.grenade_psyh)
--		action:add_precondition	(world_property(evaluators_id.grenadier,false))
		action:add_precondition	(world_property(evaluators_id.grenade_evade,false))
		action:add_precondition	(world_property(evaluators_id.grenade_psyh,false))
	end
	action:add_precondition	(world_property(evid_bandage,true))
	action:add_effect		(world_property(evid_bandage,false))
	manager:add_action		(actid_bandage,action)

	-- включение в планировщик
	for i,id in ipairs({actions_id.alife,stalker_ids.action_combat_planner,stalker_ids.action_danger_planner,actions_id.stohe_meet_base+1}) do
		action = manager:action(id)
		if action then
			action:add_precondition(world_property(evid_bandage,false))
		end
	end
end

function reset_scheme(a)
	if not a.is_stalker then
		return
	end
	local st = a.st
	local profile = a.obj:character_community()
	if not a.section then
	elseif st.ini:line_exist(a.section,"bandage") then
		profile = st.ini:r_string(a.section,"bandage")
	elseif st.ini:line_exist(st.section_logic,"bandage") then
		profile = st.ini:r_string(st.section_logic,"bandage")
	end
	local bst = st.ai('bandage')
	if bst.current_profile ~= profile then
		bst.current_profile = profile
		bst.pr = read_profile(profile)
	end
end
