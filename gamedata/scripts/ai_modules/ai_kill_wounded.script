--[[ ----------------------------------------------------------------------------------------------
 File       : ai_kill_wounded.script
 Description: Добивание раненых (combat_planner)
 Copyright  : 2017 © Prosectors Project
 Author(s)  : Rulix aka Bak
 Original   : AI Additions, 13.02.2016, 30.03.2016
--]] ----------------------------------------------------------------------------------------------
_DEBUG_ = false --// file under debugging?

local walk_dist = 6.2
local stand_dist = 3.6
local kill_dist_min = 1.1
local kill_dist_max = 3.5
local melee_dist = 1.2

local kw_ini = ini_file([[misc\ai_additions\kill_wounded.ltx]])
assert(kw_ini:section_exist("main"),"no kw_ini")
local communities_sets = {}
for _,v in ipairs(m_ranks.get_communities_list()) do
	communities_sets[v] = {
		knife = cfg_get_number(kw_ini,v,"knife",0)/100,
		strike = cfg_get_number(kw_ini,v,"strike",0)/100,
		pistol = cfg_get_number(kw_ini,v,"pistol",0)/100,
		sound = cfg_get_number(kw_ini,v,"sound",0)/100,
		aimtime = cfg_get_number(kw_ini,v,"aim_time",2000),
	}
end
kw_ini = nil


class "evaluator_enemy_wounded" (property_evaluator)
function evaluator_enemy_wounded:__init(combat_planner,name) super (nil,name)
	self.ieva = combat_planner:evaluator(stalker_ids.property_enemy_wounded)
end
function evaluator_enemy_wounded:evaluate()
	local res = self.ieva:evaluate()
	self.storage:set_property(stalker_ids.property_enemy_wounded,res)
	return res
end

class "action_kill_wounded" (planner_action)
function action_kill_wounded:__init (npc,name) super (nil,name)
	self.pr_type = read_pstor('kw_type',nil,npc)
	if not self.pr_type then
		local c = communities_sets[npc:character_community()]
		if c.strike > math.random() then
			self.pr_type = 0
		elseif c.knife > math.random() then
			self.pr_type = 1
		elseif c.pistol > math.random() then
			self.pr_type = 2
		else
			self.pr_type = 3
		end
		write_pstor('kw_type',self.pr_type,npc)
	end
end
function action_kill_wounded:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_movement_type(move.walk)
	npc:set_path_type(game_object.level_path)
	npc:set_detail_path_type(move.criteria)
	npc:set_body_state(move.standing)
	npc:set_sight(look.path_dir,nil,0)
--	npc:set_item(object.idle,npc:active_item() or npc:best_weapon())
	npc:set_dest_level_vertex_id(npc:level_vertex_id())
	self.type = choose_type(npc,self.pr_type)
	if self.type == 1 then
		self.kcr = math.random() < 0.7
	end
	local wm = npc:get_wm(true)
	if wm then
		wm:disable()
		if self.type == 2 then
			local wpn = wm:get_weapon_by_slot(1)
			if wpn then
				wm:set_weapon(wpn)
			end
		end
	end
end
function action_kill_wounded:execute()
	action_base.execute(self)
	local npc,tg = self.object,time_global()

	local enemy = npc:best_enemy()
	if not (enemy and enemy:alive()) then
		return
	end

	local npc_id = npc:id()
	if npc:path_type() ~= game_object.level_path then
		npc:set_path_type(game_object.level_path)
		npc:set_detail_path_type(move.criteria)
	end

	if self.target_id ~= enemy:id() then
		local stor = self.target_id and db.storage[self.target_id]
		if stor and stor.wounded_processor == npc_id then
			stor.wounded_processor = nil
		end
		-- пауза после убийства
		if npc:animation_count() > 0 or (self.pause_after_time or -1) > tg then
			return
		end
		local target = stor and level.object_by_id(self.target_id)
		if not self.pause_after_time and npc:movement_type() == move.stand and target and not target:alive() then
			self.pause_after_time = tg+math.random(200,1200)
			return
		end
		--
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.free)
		npc:set_item(object.idle,npc:active_item() or npc:best_weapon())
		self.target_id = enemy:id()
		self.hang_timer = time_global()+60000
		self.aim_time = nil
		self.hit_time = nil
		self.vid = nil
		self.vid_dtr = nil
		self.pause_after_time = nil
	end

	if self.hang_timer < tg then
		deadly_hit(npc,enemy)
		return
	end

	local enemy_pos = enemy:center()

	local dist = npc:position():distance_to(enemy_pos)
	if dist > stand_dist and npc:level_vertex_id() ~= self.vid then
		if db.storage[self.target_id].wounded_processor == npc_id then
			db.storage[self.target_id].wounded_processor = nil
		end
		if npc:animation_count() > 0 then
			npc:set_movement_type(move.stand)
		elseif dist < walk_dist then
			npc:set_movement_type(move.walk)
		else
			npc:set_movement_type(move.run)
		end
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.free)
		npc:set_sight(look.path_dir,nil,0)
		local processor = db.storage[self.target_id].wounded_processor
		if processor then
			processor = level.object_by_id(processor)
			if processor and processor:movement_type() == move.stand and processor:position():distance_to(npc:position()) < 2.6 then
				if not self.vid_dtr then
					self.vid_dtr = npc:vertex_in_direction(processor:level_vertex_id(),processor:direction():rotate_y(math.random()<0.5 and 85 or 275),math.random(10,30)/10)
				end
				self.vid = send_to_nearest_accessible_vertex(npc,self.vid_dtr)
				return
			end
		end
		self.vid = send_to_nearest_accessible_vertex(npc,enemy:level_vertex_id())
		if ai_reload and not self.reload then
			local wpn = ai_reload.get_weapon_to_reload(npc,true,true)
			if wpn then
				npc:set_item(object.aim_force_full1,wpn)
				self.reload = true
				return
			end
		end
		npc:set_item(object.idle,npc:active_item() or npc:best_weapon())
		return
	end

	npc:set_sight(enemy,false)

	local post_combat = db.storage[npc_id].ai.post_combat
	if post_combat then
		post_combat:pause_after_wounded()
	end

	if db.storage[self.target_id].wounded_processor == nil then
		db.storage[self.target_id].wounded_processor = npc_id
	elseif db.storage[self.target_id].wounded_processor ~= npc_id then
		npc:set_movement_type(move.stand)
		return
	end

	if post_combat then
		post_combat:pause_after_wounded(self.target_id)
	end

	if not self.kill_dist then
		self.kill_dist = math.random(kill_dist_min*10,kill_dist_max*10)/10
	end

	if dist > 1 and (dist > self.kill_dist or self.type < 2 and dist > melee_dist or npc:memory_time(enemy)-time_global() < -700) and npc:level_vertex_id() ~= self.vid then-- or not npc:see(enemy)
		if npc:animation_count() > 0 then
			npc:set_movement_type(move.stand)
		else
			npc:set_movement_type(move.walk)
		end
		if not npc:see(enemy) then
			npc:set_sight(look.path_dir,nil,0)
		end
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.free)
		npc:set_item(object.idle,npc:active_item() or npc:best_weapon())
--		if not self.vid then
			self.vid = send_to_nearest_accessible_vertex(npc,enemy:level_vertex_id())
--		end
		return
	end

	npc:set_movement_type(move.stand)
	npc:set_mental_state(anim.danger)
	npc:set_sight(look.direction,vector():sub(enemy:bone_position("bip01_neck"),npc:bone_position("bip01_neck")),true)

	if not self.aim_time then
		local c = communities_sets[npc:character_community()]
		self.aim_time = tg+math.random(math.max(0,c.aimtime-500),c.aimtime+500)
		local wpn
		if self.type == 3 then
			wpn = get_current_weapon(npc)
		elseif self.type == 2 then
			wpn = npc:item_in_slot(PISTOL_SLOT) or npc:best_weapon()
		elseif self.type == 1 then
			wpn = npc:item_in_slot(KNIFE_SLOT) or npc:best_weapon()
--			wpn:set_ammo_elapsed(wpn:get_weapon().ammo_mag_size)	-- нужно зарядить нож
		end
		if wpn then
			npc:set_item(object.aim1,wpn)
		else
			self.type = 0
		end
		if self.type == 0 then
			if math.random() < 0.3 then
				npc:set_item(object.strap,npc:active_item())
			else
				npc:set_item(object.idle,npc:active_item())
			end
		end
		if c.sound > math.random() and m_sound.set_sound_play(npc,'kill_wounded',{self.sound_callback,self}) then
			self.sound_end = false
		else
			self.sound_end = true
		end
		return
	end

	if self.aim_time > tg or not self.sound_end and self.aim_time+5000 > tg then
		return
	elseif self.hang_timer > tg+10000 then
		self.hang_timer = self.type > 0 and tg+5000 or tg+10000
	end

	if self.type == 1 and self.kcr and npc:body_state() ~= move.crouch and npc:position().y+0.6 > enemy_pos.y then
		npc:set_body_state(move.crouch)
		return
	end
	if self.type > 0 then
		if not weapon_locked(npc) then
			npc:set_item(object.fire1,npc:active_item(),math.random() < 0.2 and math.random(2,12) or 1,650)
		end
		return
	end
	if not self.hit_time and enemy:alive() then
		if npc:animation_count() == 0 then
			add_facer_anims(npc)
			self.hit_time = tg+333
		end
	elseif self.hit_time < tg then
		strike_hit(npc,enemy)
		self.hit_time = nil
	end
end
function action_kill_wounded:finalize()
    action_base.finalize(self)
	local npc = self.object
	if db.storage[self.target_id] and db.storage[self.target_id].wounded_processor == npc:id() then
		db.storage[self.target_id].wounded_processor = nil
	end
	if not npc:alive() then
		return
	end
--	npc:set_dest_level_vertex_id(npc:level_vertex_id())
	npc:set_item(object.idle,npc:active_item())
--	npc:set_sight(look.path_dir,nil,0)
--	npc:clear_animations()
	if npc:best_enemy() then
		m_sound.stop_sound_play(npc,3)
	end
	local wm = npc:get_wm(true)
	if wm then
		wm:disable(time_global()+200)
	end
	self.vid = nil
	self.vid_dtr = nil
	self.aim_time = nil
	self.target_id = nil
	self.reload = nil
	self.sound_end = nil
	self.pause_after_time = nil
end
function action_kill_wounded:sound_callback()
	if self.aim_time then
		self.sound_end = true
	end
end

function choose_type(npc,pr_type)
	local wm = npc:get_wm(true)
	local pr_wpn = npc:best_weapon()
	local act_wpn = npc:active_item()
	if not pr_wpn then
		return 0
	elseif pr_type == 1 and npc:item_in_slot(KNIFE_SLOT) or pr_wpn:is_knife() or act_wpn and act_wpn:is_knife() then
		return 1
	elseif pr_type == 0 then
		return 0
	elseif pr_type == 2 and (npc:item_in_slot(PISTOL_SLOT) or wm and wm:get_weapon_by_slot(PISTOL_SLOT)) then
		return 2
	elseif weapon_blaster_classes[pr_wpn:clsid()] then
		return (npc:item_in_slot(PISTOL_SLOT) or wm and wm:get_weapon_by_slot(PISTOL_SLOT)) and 2 or npc:item_in_slot(KNIFE_SLOT) and 1 or 0
	end
	return 3
end

function deadly_hit(npc,target)
	local hi = hit()
	hi:bone("bip01_head")
	hi.type = hit.wound
	hi.power = 10
	hi.impulse = 0
	hi.draftsman = npc
	hi.direction = vector.zero()
	target:hit(hi)
end

function strike_hit(npc,target)
	local hi = hit()
	hi:bone("bip01_neck")
	hi.type = hit.strike
	hi.power = math.random(100)/100
	hi.impulse = 50
	hi.draftsman = npc
	hi.direction = target:bone_position("bip01_neck"):sub(npc:bone_position("bip01_neck"))
	sound_object([[material\dead-body\collide\hithard06hl]]):play_at_pos(target,target:center(),0)
	target:hit(hi)
	local facer = db.storage[npc:id()].ai.facer
	if facer then
		facer.abtime = time_global()+2000
		facer.target = nil
	end
end

local valid_anim_slot = {[1]=true,[2]=true,[3]=true,[4]=true,[8]=true,[9]=true,[10]=true}
function add_facer_anims(npc)
	local wpn,slot = npc:active_item(),0
	if wpn and npc:weapon_unstrapped() and valid_anim_slot[wpn:animation_slot()] then
		slot = wpn:animation_slot()
	end
	npc:clear_animations()
	if npc:mental_state() == anim.free then
		if slot == 0 and math.random() < 0.5 then
			npc:add_animation("udar_0",true)
		else
			npc:add_animation("free_facer_"..slot,true)
		end
	else
		npc:add_animation("norm_facer_"..slot.."_0",true)
		npc:add_animation("norm_facer_"..slot.."_1",true)
	end
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function init()
	event("presets"):register(presets)
end
function presets()
	event("npc_spawn"):register(add_to_binder)
end

function add_to_binder(t)
	local manager = t.st.planner
	local combat_action_planner = t.st.combat_planner
--	local storage = t.st.ai('kill_wounded')

	manager:add_evaluator(stalker_ids.property_enemy_wounded,evaluator_enemy_wounded(combat_action_planner,"eva_enemy_wounded"))

	local new_action = action_kill_wounded(t.obj,"kill_wounded")
	new_action:add_precondition(world_property(stalker_ids.property_critically_wounded,false))
	new_action:add_precondition(world_property(stalker_ids.property_danger_grenade,false))
	new_action:add_precondition(world_property(stalker_ids.property_enemy,true))
	new_action:add_precondition(world_property(stalker_ids.property_enemy_wounded,true))
	new_action:add_effect(world_property(stalker_ids.property_enemy,false))

	combat_action_planner:remove_action(stalker_ids.action_kill_wounded_enemy)
	combat_action_planner:add_action(stalker_ids.action_kill_wounded_enemy,new_action)
end
