--[[ ----------------------------------------------------------------------------------------------
 File       : bind_physic_object.script
 Description: Physic objects binding
 Copyright  : 2004 © GSC Game World
 Author     : Jon
 Editors    : Zmey, Karlan
--]] ----------------------------------------------------------------------------------------------
--//-----------------------------------------------------------------
--// Flags for enable output of the debug information
--//-----------------------------------------------------------------
_DEBUG_ = false --// file under debugging?
_DEBUG_GSC_ = _DEBUG_ and false --// only for scripts by GSC
--//-----------------------------------------------------------------
function init(obj)
    local ini = obj:spawn_ini()
    if ini then
        if not (ini:section_exist("logic") or ini:section_exist("drop_box")) then
            return --// НЕ биндить, если у него нет секции 'logic'/'drop_box'
        end
    elseif obj:clsid() ~= clsid.projector then --// прожектор нужно биндить даже без logic
        return
    end
    local new_binder = generic_physics_binder(obj)
    obj:bind_object(new_binder)
end
--//-----------------------------------------------------------------
class "generic_physics_binder" (object_binder)
--//-----------------------------------------------------------------
function generic_physics_binder:__init(obj) super(obj)
    self.initialized = false
    self.loaded = false
end 
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:reload(section)
    object_binder.reload(self, section)
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:reinit()
    object_binder.reinit(self)
    self.obj_id     = self.object:id()
    self.obj_clsid  = self.object:clsid()
    self.ini        = self.object:spawn_ini()
    
    db.storage[self.obj_id] = {}
    self.st = db.storage[self.obj_id]
    
    if self.obj_clsid == clsid.projector then
        self.is_projector = true
    elseif self.obj_clsid == clsid.obj_phys_destroyable and self.ini and self.ini:section_exist("drop_box") then
        self.is_drop_box = true
    end
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:net_spawn(data)
    if not object_binder.net_spawn(self, data) then
        warning("net_spawn:obj=NIL")
        return false
    end
    event("obj_spawn"):trigger({obj=self.object,obj_id=self.obj_id,obj_clsid=self.obj_clsid,se_obj=data})
    return true
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:update(delta)
    object_binder.update(self, delta)
    if not self.initialized and actor then
        self.initialized = true
        xr_logic.initialize_obj(self.object, self.st, self.loaded, actor, modules.stype_item)        
        --// запускаем ассоциированный с объектом партикл
        local particle = cfg_get_string(self.st.ini, self.st.section_logic, "particle", self.object, false, "", nil)
        if particle then
            self.particle = particles_object(particle)
            self.particle:play_at_pos(self.object:position())
        end
        --// дизаблим ассоциированный с объектом граф
        local graph_point_marker = cfg_get_string(self.st.ini, self.st.section_logic, "graph_point_marker", self.object, false, "", nil)
        if graph_point_marker and level.patrol_path_exists(graph_point_marker) then
            self.disable_graph_point = patrol(graph_point_marker):game_vertex_id(0)
            game_graph():accessible(self.disable_graph_point, false)
        end
    end
    if self.st.active_section or self.is_drop_box then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
        self.object:set_callback(callback.hit, generic_physics_binder.hit_callback, self)
        self.object:set_callback(callback.death, generic_physics_binder.death_callback, self)
        self.object:set_callback(callback.use_object, generic_physics_binder.use_callback, self)
    end
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:net_destroy()
    if not self.object then return end
    local st = db.storage[self.obj_id]
    if st and st.active_scheme then
        xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
    end
    if self.particle then
        self.particle:stop()
    end
    db.storage[self.obj_id] = nil
    self:clear_callbacks()
    object_binder.net_destroy(self)
end
--//------------------------------------------------------
function generic_physics_binder:clear_callbacks()
    self.object:set_callback(callback.use_object, nil)
    self.object:set_callback(callback.hit, nil)
    self.object:set_callback(callback.death, nil)
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:net_save_relevant()
    return true
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:save(packet)
    if not self.object then return warning("save:object=NIL") end
    log("save:PHYSIC=[%s]:[%s]", self.object, ">")
    SAVE_OBJECT(self.object)
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:load(reader)
    if not self.object then return warning("load:object=NIL") end
    log("load:PHYSIC=[%s]:[%s]", self.object, ">")
    self.loaded = true
    -- if reader:r_eof() then --// при использовании пакетов (или если есть маркеры) раскомментировать! TODO: сделать маркеры
        -- if not alife():object(self.object:id()) then
            -- warning("load:obj=[%s/%s]<~server_object=NIL", self.object:name(), self.object:id())
        -- else
            -- abort("load:SAVE_FILE_IS_CORRUPT:Obj=[%s],ID=[%s]", self.object:name(), self.object:id())
        -- end
        -- self.loaded = false
        -- return
    -- end
    LOAD_OBJECT(self.object)
end
----------------------------------------------------------------------------------------------------------------------
function generic_physics_binder:use_callback(obj, who)
    if self.st.active_section then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
    end
    event("obj_used"):trigger({obj=self.object,obj_id=self.obj_id,who=who,who_id=who and who:id()})
end
--//------------------------------------------------------
function generic_physics_binder:hit_callback(obj, amount, local_direction, who, bone_index, hit_type, weapon_id)
    log('hit sended:<%s>, bone_name = %s:[a=%s], who:<%s>', obj, obj:get_bone_name(bone_index), amount, who)
    if self.st.ph_on_hit then
        xr_logic.issue_event(self.object, self.st.ph_on_hit, "hit_callback", {victim=obj,amount=amount,dir=local_direction,who=who,bone=bone_index})
    end
    if self.st.active_section then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
    end
    event("obj_hit"):trigger({victim=obj,amount=amount,dir=local_direction,who=who,bone=bone_index})
end
--//------------------------------------------------------
function generic_physics_binder:death_callback(victim, who)
    if self.st.active_section then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", {victim = victim, who = who})
    end
    if self.particle then
        self.particle:stop()
    end
    if self.disable_graph_point then
        game_graph():accessible(self.disable_graph_point, true)
    end
    event("obj_death"):trigger({binder=self,victim=victim,who=who})
end
----------------------------------------------------------------------------------------------------------------------