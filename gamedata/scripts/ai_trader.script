----------------------------------------------------------------------------------------------------
-- mob_trader
----------------------------------------------------------------------------------------------------
local trader = nil

local global_animations = {
    desk_idle                = {"idle","idle_1","palci","zatylok"},
    desk_talk                = {"idle","idle_1"},
    desk_to_chair_hack        = {"idle_spinka"},
    desk_to_listen            = {"idle_chitaet"},
    desk_to_diagonal        = {"perehod_0"},
    
    chair_hack_idle            = {"idle_2","idle_2_def_0"},
    chair_hack_talk            = {"idle_2_talk_0","idle_2_talk_1","idle_2_talk_2","idle_2_talk_3"},
    chair_hack_to_diagonal    = {"idle_2_to_idle_0"},
    chair_hack_to_desk        = {"spinka_idle"},
    
    compute_idle                = {"idle_1_spec_think_0","idle_1_spec_think_1"},
    compute_idle_to_diagonal    = {"idle_1_to_idle_0"},
    
    diagonal_idle            = {"idle_0_def_0","idle_0_spec_click_0","idle_0_spec_scratch_0"},
    diagonal_idle_short        = {"idle_0_def_0"},
    diagonal_talk            = {"idle_0_talk_0","idle_0_talk_1","idle_0_talk_2","idle_0_talk_3"},
    diagonal_to_chair_hack    = {"idle_0_to_idle_2"},
    diagonal_to_compute        = {"idle_0_to_idle_1"},
    diagonal_to_desk        = {"perehod_1"},
        
    first_phrase            = {"vstuplenie"},
    
    listen_idle                = {"chitaet"},
    listen_to_desk            = {"chitaet_idle"},
    
    hello                = {"hello"}    
}

local head_animations = {
    normal            = {"talk_0","talk_1","talk_4"},
    angry            = {"talk_3","talk_2","talk_1"},
    good            = {"talk_glad_0"},
    first_phrase    = {"vstuplenie_head"}
}

local snd_mob = {
    trader_come_here = {
        -- Подойди-ка... Надо бы ситуацию прояснить.
        [[characters_voice\scenario\trader\trader1a]]
    },

    trader_come_here2 = {
        -- Ну, че стоишь? Подходи - не кусаюсь.
        [[characters_voice\scenario\trader\trader1b]]
    },

    trader_monolog1 = {
        [[characters_voice\scenario\trader\trader_monolog1]]
    },

    trader_tut_choice = {
        [[characters_voice\scenario\trader\trader_dialog_choice]]
    },

    trader_map_quest_1 = {
        [[characters_voice\scenario\trader\trader_tutorial_map_quest_1]]
    },

    trader_pda_on_1 = {
        [[characters_voice\scenario\trader\trader_tutorial_pda_on_1]]
    },

    trader_pda_on_2 = {
        [[characters_voice\scenario\trader\trader_tutorial_pda_on_2]]
    },

    trader_pda_on_3 = {
        [[characters_voice\scenario\trader\trader_tutorial_pda_on_3]]
    },

    trader_pda_1 = {
        [[characters_voice\scenario\trader\trader_tutorial_pda_1]]
    },
    
    trader_map_on_1 = {
        [[characters_voice\scenario\trader\trader_tutorial_map_on_1]]
    },

    trader_map_on_2 = {
        [[characters_voice\scenario\trader\trader_tutorial_map_on_2]]
    },

    trader_map_on_3 = {
        [[characters_voice\scenario\trader\trader_tutorial_map_on_3]]
    },

    trader_tutorial_alarm = {
        [[characters_voice\scenario\trader\trader_tutorial_rejection_1]]
    },

    trader_go_help_tolik = {
        [[characters_voice\scenario\trader\trader_tutorial_go_help_tolik_2]]
    },

    trader_hello_what_have_you_got = {
        [[characters_voice\scenario\trader\trader_script1a_1]],
        [[characters_voice\scenario\trader\trader_script1a_2]],
        [[characters_voice\scenario\trader\trader_script1a_3]],
        [[characters_voice\scenario\trader\trader_script1a_4]],
        [[characters_voice\scenario\trader\trader_script1a_5]],
        [[characters_voice\scenario\trader\trader_script1a_6]]
    },

    trader_bye = {
        [[characters_voice\scenario\trader\trader3c]],
        [[characters_voice\scenario\trader\trader_script1c_5]]
    },

    trader_exchanged = {
        [[characters_voice\scenario\trader\trader_script1c_1]]
    },

    trader_good_trade = {
        [[characters_voice\scenario\trader\trader_script1c_2]],
        [[characters_voice\scenario\trader\trader_script1c_3]],
        [[characters_voice\scenario\trader\trader_script1c_4]]
    },

    trader_bad_trade = {
        [[characters_voice\scenario\trader\trader_script1c_6]],
        [[characters_voice\scenario\trader\trader_script1c_7]],
        [[characters_voice\scenario\trader\trader_script1c_8]],
        [[characters_voice\scenario\trader\trader_script1c_9]]
    },

    -- UNUSED:
    go_out = {
            [[characters_voice\scenario\trader\trader_script1b_1]],
            [[characters_voice\scenario\trader\trader_script1b_2]],
            [[characters_voice\scenario\trader\trader_script1b_3]],
            [[characters_voice\scenario\trader\trader_script1b_4]],
            [[characters_voice\scenario\trader\trader_script1b_5]]
    },

    monolog2 = {
            [[characters_voice\scenario\trader\trader_monolog2]]
    },

    monolog3 = {
            [[characters_voice\scenario\trader\trader_script1b_1]]
    }
}
----------------------------------------------------------------------------------------------------
function on_start_tutorial_item_1()
    if trader == nil then return end
    trader:external_sound_start("characters_voice\\scenario\\trader\\trader_tutorial_pda_12")
end

function on_stop_tutorial_item()
    if trader == nil then return end
    trader:external_sound_stop()
end
----------------------------------------------------------------------------------------------------

class "mob_trader"

function mob_trader:__init(obj, storage)
    self.object = obj
    self.st        = storage
end

function mob_trader:reset_scheme()

    self.st.signals = {}
    
    self.object:set_callback(callback.trader_global_anim_request, self.on_global_anim_request, self )
    self.object:set_callback(callback.trader_head_anim_request, self.on_head_anim_request, self )
    self.object:set_callback(callback.trader_sound_end, self.on_sound_end, self )

    -- start global animation
    self.object:set_trader_global_anim(self:select_global_animation())
    
    -- start sound and head animation
    if (self.st.sound_phrase) then 
		local snd = snd_mob[self.st.sound_phrase]
        snd = snd[math.random(#snd)]
        self.object:set_trader_sound(snd, self:select_head_animation());
    end
    
    if self.st.anim_head == nil then
        self.st.anim_head = "normal"
    end
    
    trader = self.object
end

function mob_trader:update(delta)
    if xr_logic.try_switch_to_another_section(self.object, self.st) then
        return
    end
end

---------------------------------------------------------------------------------------------------------------------
function mob_trader:select_global_animation()
    local anim_set = global_animations[self.st.anim_global]
    return anim_set[math.random(#anim_set)]
end

function mob_trader:select_head_animation()
    local anim_set = head_animations[self.st.anim_head]
    return anim_set[math.random(#anim_set)]
end

---------------------------------------------------------------------------------------------------------------------

function mob_trader:on_global_anim_request()
    self.st.signals["animation_end"] = true    
    
    if (not self.st.play_once) then
        self.object:set_trader_global_anim(self:select_global_animation())
    end
end

function mob_trader:on_head_anim_request()
    if self.st.anim_head == nil then return end
        
    self.object:set_trader_head_anim(self:select_head_animation());
end

function mob_trader:on_sound_end()
    self.st.signals["sound_phrase_end"] = true    
end
---------------------------------------------------------------------------------------------------------------------
function mob_trader:deactivate()
    self.object:set_callback(callback.trader_global_anim_request, nil )
    self.object:set_callback(callback.trader_head_anim_request, nil )
    self.object:set_callback(callback.trader_sound_end, nil )
    self.st.signals = {}
    trader        = nil
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
    printf("DEBUG: add_to_binder: npc:name()='%s', scheme='%s', section='%s'", npc:name(), scheme, section)

    local new_action = mob_trader(npc, storage)

    -- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
    xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
    local st    = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
    st.logic    = xr_logic.cfg_get_switch_conditions(ini, section, npc)

    st.anim_global    = cfg_get_string(ini, section, "anim_global", npc, true,  "")
    st.can_talk          = cfg_get_bool(ini,   section, "can_talk",    npc, false, true)
    st.tip_text          = cfg_get_string(ini, section, "tip_text",    npc, false, "", "character_use")
    if st.tip_text == nil then
        st.tip_text = ""
    end
    npc:set_tip_text(st.tip_text)
    
    if (ini:line_exist( section, "sound_phrase")) then
        st.anim_head    = cfg_get_string(ini, section, "anim_head", npc, false, "")
        st.sound_phrase    = cfg_get_string(ini, section, "sound_phrase", npc, false, "")
    else
        st.anim_head    = nil
        st.sound_phrase    = nil
    end
    
    
    --' check if play once animation
    st.play_once = false
    if (ini:line_exist( section, "on_signal")) then
        local str = cfg_get_string(ini, section, "on_signal", npc, false, "")
        local par = parse_params(str)
        if par[1] == "animation_end" then
            st.play_once = true
        end
    end

    if st.can_talk == true then
        npc:enable_talk()
    else
        npc:disable_talk()
    end
    
end
