--[[ ----------------------------------------------------------------------------------------------
 File       : bind_heli.script
 Description: Helicopters binder
 Copyright  : 2004 © GSC Game World
 Author     : Чугай Александр
 Editors    : Karlan
--]] ----------------------------------------------------------------------------------------------
--//-----------------------------------------------------------------
--// Flags for enable output of the debug information
--//-----------------------------------------------------------------
_DEBUG_ = false --// file under debugging?
_DEBUG_GSC_ = _DEBUG_ and false --// only for scripts by GSC
--//-----------------------------------------------------------------
function bind(obj)
    log("bind:obj=[%s],clsid=[%s]:(%s)", obj:name(), obj:clsid(), obj:spawn_ini() ~= nil)
    local ini = obj:spawn_ini()
    if ini and ini:section_exist("logic") then --// биндим только тех, которые под логикой
        obj:bind_object(heli_binder(obj, ini))
    end
end
--//-----------------------------------------------------------------
class "heli_binder" (object_binder)
--//-----------------------------------------------------------------
function heli_binder:__init(obj) super(obj)
    self.initialized = false
    self.loaded      = false
    self.destroyed   = false
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:reload(section)
    object_binder.reload(self, section)
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:reinit()
    object_binder.reinit(self)
    
    self.obj_id      = self.object:id()
    self.obj_clsid   = self.object:clsid()
    self.obj_ini     = self.object:spawn_ini()
    self.CHeli       = self.object:get_helicopter()
    
    db.storage[self.obj_id] = {}
    self.st = db.storage[self.obj_id]
    self:set_callbacks() --// все коллбеки ставим здесь
    
    self.last_hit_snd_timeout = 0
    self.flame_start_health   = cfg_get_number(sini, "helicopter", "flame_start_health", self.object, true)
    
    self.st.combat = heli_combat.heli_combat(self.object, self.CHeli)
    self.st.flame_start_snd   = m_sound.get_sound_object("heli_explosion", "random")
end
function heli_binder:set_callbacks()
    self.object:set_callback(callback.helicopter_on_point, self.on_point, self)
    self.object:set_callback(callback.helicopter_on_hit,   self.on_hit,   self)
    -- self.object:set_callback(callback.use_object,          self.on_use,   self) --// todo:
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:net_spawn(data)
    if not object_binder.net_spawn(self, data) then return false end
    local server_object = alife():object(self.obj_id)
    if server_object then
        db.add_heli(self.object)
        LOAD_DATA(self.object)
        event("heli_spawn"):trigger({obj=self.object,obj_id=self.obj_id,obj_clsid=self.obj_clsid,se_obj=data})
    else
        abort("heli_binder:net_spawn:server_object:[%s]:[%s] is NIL", self.object:name(), self.obj_id)
    end
    return true
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:update(delta)
    if not self.object then warning("update:object(%s)=NIL", self.obj_id) return end
    object_binder.update(self, delta)
    if not self.initialized then
        self.initialized = true
        --// При кривой сборке "универсальных" путей обваливается апдейт, так что пересобирайте и пересобирайте :)
        xr_logic.initialize_obj(self.object, self.st, self.loaded, _, modules.stype_heli)
    elseif self.destroyed then
        xr_logic.switch_to_section(self.object, self.st, "nil")
    else
        if self.st.active_section then
            xr_logic.issue_event( self.object, self.st[self.st.active_scheme], "update", delta )
        end
        self:check_health()
    end
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:net_destroy()
    if not self.object then return end
    event("heli_destroy"):trigger({obj=self.object,obj_id=self.obj_id,obj_clsid=self.obj_clsid})
    SAVE_DATA(self.object)
    CLEAR_OBJECT(self.object)
    db.storage[self.object:id()] = nil
    db.del_heli(self.object)
    object_binder.net_destroy( self )
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:net_save_relevant()
    return true
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:save( packet )
    if not self.object then warning("self.object=NIL") return end
    log("save:HELI=[%s]:[%s]", self.object, ">")
    self.st.combat:save(packet)
    SAVE_OBJECT(self.object)
end
----------------------------------------------------------------------------------------------------------------------
function heli_binder:load( packet )
    if not self.object then warning("self.object=NIL") return end
    log("load:HELI=[%s]:[%s]", self.object, ">")
    self.loaded = true
    if packet:r_eof() then
        if not sim:object(self.object:id()) then
            warning("load:obj=<%s><~server_object=NIL>", self.object)
        else
            abort("bind_heli:load:SAVE FILE IS CORRUPT:obj=[%s], ID=[%s]", self.object:name(), self.object:id())
        end
        self.loaded = false
        return
    end
    self.st.combat:load(packet)
    LOAD_OBJECT(self.object)
end
--// PROCESS FUNCTIONS //---------------------------------------------------------------------------------------------
function heli_binder:check_health()
    if self.CHeli and not self.CHeli.m_dead then
        self:get_health()
        if self.heli_health < self.flame_start_health and not self.CHeli.m_flame_started then
            heli_start_flame(self.object)
            m_sound.play_heli_snd(self.st, "damage", 3)
        end
        if self.heli_health <= 0.005 and not self.st.immortal then
            if distance_between(actor, self.object) < 200 then --// Karlan: пока костылем подопрем :)
                m_sound.play_heli_snd(self.st, "death", 4)
            end
            self.destroyed = self.st.destroyed == true
        end
    end
end
function heli_binder:get_health()
    if self.st.invulnerable then
        self.CHeli:SetfHealth(1)
        self.heli_health = 1
    else
        self.heli_health = self.CHeli:GetfHealth()
        if self.heli_health < 0 then
            self.CHeli:SetfHealth(0)
            self.heli_health = 0
        end
    end
end
--// CALLBACKS //-----------------------------------------------------------------------------------------------------
function heli_binder:on_hit(power, impulse, hit_type, enemy_id)
    if not self.object then warning("on_hit:object=NIL") return end
    write_pstor('hitter_id', enemy_id and enemy_id or INVALID_ID, self.object)
    local enemy        = enemy_id and level.object_by_id(enemy_id)
    local enemy_cls_id = get_clsid(enemy)
    if enemy and IsStalker(enemy) then --// если обидчик актёр или сталкер:
        --// то сделать его своим врагом
        if not self.st.combat.enemy_id then
            self.st.combat.enemy_id = enemy_id
        end
        if self.st.hit then
            xr_logic.issue_event(self.object, self.st.hit, "hit_callback", {obj=self.object,amount=power,who=enemy,victim=self.object})
        end
    end
    --// пилоты ругаются по рации
    if self.last_hit_snd_timeout < time_global() then
        self.last_hit_snd_timeout = time_global() + math.random(4,8)*1000
        m_sound.play_heli_snd(self.st, "hit", 2)
    end
end
--//------------------------------------------------------
function heli_binder:on_point( distance, position, path_idx )
    if not self.object then
        warning("on_point:object=NIL:")
    elseif self.st.active_section then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", self.object, nil, path_idx)
    end
end
--// FUNCTIONS //-----------------------------------------------------------------------------------------------------
function get_heli_health(heli, st)
    local health
    if st.invulnerable then
        heli:SetfHealth(1)
        return 1
    else
        health = heli:GetfHealth()
        if health < 0 then
            heli:SetfHealth(0)
            return 0
        end
    end
    return health
end
--//------------------------------------------------------
function is_heli_alive(heli)
    return get_heli_health(heli:get_helicopter(), db.storage[heli:id()]) > 0.005
end
--//------------------------------------------------------
function heli_start_flame(heli)
    heli:get_helicopter():StartFlame()
    local snd = db.storage[heli:id()].flame_start_snd
    if snd then snd:play(heli) end
    --// событие
end
--//------------------------------------------------------
function heli_die(obj) --// todo: доделать в движке
    local heli = obj and obj:get_helicopter()
    if heli then
        heli:Die()
        local heli_id = obj:id()
        local st = db.storage[heli_id]
        if st then
            if st.active_section then
                xr_logic.issue_event(obj, st[st.active_scheme], "death_callback", obj, actor)
            end
            st.destroyed = true
        end
    end
    db.del_heli(obj)
    event("heli_death"):trigger({victim=obj})
end
--//------------------------------------------------------
function heli_release(heli, heli_id)
    heli_die(heli)
    local heli_id = heli_id or (heli and heli:id())
    local server_heli = heli_id and alife():object(heli_id)
    if server_heli then
        alife():release(server_heli, true)
    end
end
--//------------------------------------------------------------------------------------------------------------------