--[[ ----------------------------------------------------------------------------------------------
 File       : bind_monster.script
 Description: bind for objects of monsters classes
 Copyright  : 2017 © Prosectors Project
 Author     : Karlan (по материалам GSC) 
--]] ----------------------------------------------------------------------------------------------
--//-----------------------------------------------------------------
--// Flags for enable output of the debug information
--//-----------------------------------------------------------------
_DEBUG_ = false --// file under debugging?
_DEBUG_GSC_ = _DEBUG_ and false --// only for scripts by GSC
--//-----------------------------------------------------------------
function bind(obj)
    local new_binder = monster_binder(obj)
    obj:bind_object(new_binder)
end
--//-----------------------------------------------------------------
class "monster_binder" (object_binder)
--//-----------------------------------------------------------------
function monster_binder:__init(obj) super(obj)
    self.loaded         = false
    self.first_update   = false
        
    self.obj_id       = obj:id()
    self.obj_clsid    = obj:clsid()
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:reload(section) end --// delete?
----------------------------------------------------------------------------------------------------------------------
function monster_binder:reinit()
    db.storage[self.obj_id] = {}
    self.st = db.storage[self.obj_id]
        
    self.object:set_patrol_extrapolate_callback(            self.extrapolate_callback,  self)
    self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback,     self)
    self.object:set_callback(callback.hit,                  self.hit_callback,          self)
    self.object:set_callback(callback.death,                self.death_callback,        self)
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:use_callback(obj, who)
    -- log('who<%s> used obj<%s>:<alive:%s>', who, obj, obj:alive())
    local is_alive = obj:alive()
    local event_name = is_alive and "mob_alive_use" or "mob_corpse_use"
    event(event_name):trigger{obj=self.object,obj_id=self.obj_id,who=who,is_monster=true}
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:update(delta)
    if not self.first_update then
        self.object:set_callback(callback.use_object, self.use_callback, self)
        self.first_update = true
    end
    if self.object:alive() then
        local tip_text = self.object:is_talk_enabled() and "character_use" or ""
        self.object:set_tip_text(tip_text)
        local squad = get_object_squad(self.object)
        if squad and (squad:commander_id() == self.object:id()) then squad:update() end
        if squad and squad.current_action and squad.current_action.name == "reach_target" then
            local squad_target = simulation_objects.get_sim_obj_registry().objects[squad.assigned_target_id]
            if squad_target == nil then return end
            local target_pos, target_lv_id, target_gv_id = squad_target:get_location()
            obj_capture(self.object, true)
            if squad:commander_id() == self.object:id() then
                action(self.object, move(move.walk_with_leader, target_pos), cond(cond.move_end))
            else
                local commander_pos = sim:object(squad:commander_id()).position
                if commander_pos:distance_to(self.object:position()) > 10 then
                    action(self.object, move(move.run_with_leader, target_pos), cond(cond.move_end))
                else
                    action(self.object, move(move.walk_with_leader, target_pos), cond(cond.move_end))
                end
            end
            return
        end
        event("mob_living_update"):trigger{obj=self.object,obj_id=self.obj_id,loaded=self.loaded,delta=delta,is_monster=true}
    else
        if equal_active_item_section('wpn_knife') then
            if equal_active_item_condition(0.5) then
                self.object:set_tip_text_default()
            else
                self.object:set_tip_text("Нужен острый нож")
            end
        else
            self.object:set_tip_text("Нужен нож")
        end
        event("mob_corpse_update"):trigger{obj=self.object,obj_id=self.obj_id,loaded=self.loaded,delta=delta,is_monster=true}
    end
    if self.st.active_section then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
    end
    event("mob_update"):trigger{obj=self.object,obj_id=self.obj_id,loaded=self.loaded,delta=delta,is_monster=true}
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:extrapolate_callback()
    if not self.object then return false end
    if not self.st then return false end
    if self.object:get_script() == false then return false end --// Karlan->Karlan: попробовать сюда еще хомов добавить
    
    local patrol_path = self.object:patrol()
    if patrol_path and level.patrol_path_exists(patrol_path) then
        local cur_pt = self.object:get_current_point_index()
        if patrol(patrol_path):flags(cur_pt):get() == 0 then
            return true
        end
    else
        warning("extrapolate_callback:There is no patrol path=[%s]", patrol_path)
    end
    return false
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:waypoint_callback(obj, action_type, index)
    if self.st and self.st.active_section then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj, action_type, index)
    end
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:death_callback(victim, who)
    if not (self.object and victim) then return end
    write_pstor('killer_id', who and get_id(who) or INVALID_ID, victim)
    write_pstor('killer_name', who and who:name() or "INVALID_NAME", victim)
    if self.st.mob_death then
        xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", {victim = victim, who = who})
    end
    if self.st.active_section then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
    end
    se_smart_terrain.on_death(self.object:id())
    --// Наносим небольшой импульс вперед.
    local h = hit()
        h.draftsman = who
        h.type = hit.fire_wound
        h.direction = who:position():sub(victim:position()):normalize()
        h:bone("pelvis")
        h.power = 1
        h.impulse = 0.5
        victim:hit(h) --// пнем и добьем :)
    m_ranks.add_kill_count(victim, who) --// on delete [x]
    event("mob_death"):trigger{obj=self.object,obj_id=self.obj_id,victim=victim,who=who,is_monster=true}
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:hit_callback(obj, amount, local_direction, who, bone_index, hit_type, weapon_id)
    if not (self.object and obj) then return end
    write_pstor('hitter_id', who and get_id(who) or INVALID_ID, obj)
    if self.st.hit then
        xr_logic.issue_event(self.object, self.st.hit, "hit_callback", {obj=self.object,obj_id=self.obj_id,victim=self.object,amount=amount,dir=local_direction,who=who,bone=bone_index,hit_type=hit_type,weapon_id=weapon_id,is_monster=true})
    end
    event("mob_hit"):trigger{obj=self.object,obj_id=self.obj_id,victim=self.object,amount=amount,dir=local_direction,who=who,bone=bone_index,hit_type=hit_type,weapon_id=weapon_id,is_monster=true}
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:net_spawn(sobject)
    local mob = self.object
    if not (mob and object_binder.net_spawn(self, sobject)) then
        warning("net_spawn:NIL")
        return false
    end
    log("net_spawn:NPC=<%s>:is_alive=[%s]:[%s]", mob, mob.alive and mob:alive(), ">")
    local server_object = sim:object(self.obj_id)
    if not server_object then return true end
    if not mob:alive() then
        event("corpse_spawn"):trigger{obj=mob,obj_id=self.obj_id,obj_clsid=self.obj_clsid,sobject=server_object,st=self.st,is_monster=true}
        return true
    end
 debug.g_spy:start("monster_binder:setup_logic")
    m_gulag.setup_gulag_and_logic_on_spawn(mob, self.st, server_object, modules.stype_mobile, self.loaded)
 debug.g_spy:finish("monster_binder:setup_logic")
    LOAD_DATA(mob)
    event("mob_spawn"):trigger{obj=mob,obj_id=self.obj_id,obj_clsid=self.obj_clsid,sobject=server_object,is_monster=true}
    return true
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:net_destroy()
    if not self.object then
        warning("net_destroy:monster=NIL")
        return
    elseif self.st then
        log("net_destroy:NPC=<%s>:[%s]", self.object, ">")
        event("mob_destroy"):trigger{obj=self.object,obj_id=self.object:id(),obj_clsid=self.obj_clsid,is_monster=true}
        if self.st.active_scheme then
            xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy")
        end
        SAVE_DATA(self.object)
        CLEAR_OBJECT(self.object)
    else
        warning("net_destroy:=>id=[%s],mob=[%s]~not_storage", self.object:id(), self.object:name())
    end
    db.storage[self.object:id()] = nil
    self.object:set_callback(callback.death,                nil)
    self.object:set_callback(callback.patrol_path_in_point, nil)
    self.object:set_callback(callback.hit,                  nil)
    self.object:set_callback(callback.use_object,           nil)
end 
----------------------------------------------------------------------------------------------------------------------
function monster_binder:net_save_relevant()
    return true
end
----------------------------------------------------------------------------------------------------------------------
--// Karlan->Nazgool: я включил монстрам сохранения, теперь сохраняются
function monster_binder:save(packet)
    if not self.object then return warning("save:object=NIL") end
    log("save:MONSTER=[%s]:[%s]", self.object, ">")
    SAVE_OBJECT(self.object)
    event("mob_save"):trigger{obj=self.object,obj_id=self.object:id(),packet=packet,is_monster=true}
end
----------------------------------------------------------------------------------------------------------------------
function monster_binder:load(reader)
    if not self.object then return warning("load:object=NIL") end
    log("load:MONSTER=[%s]:[%s]", self.object, ">")
    self.loaded = true
    -- if reader:r_eof() then --// при использовании пакетов раскомментировать!
        -- if not alife():object(self.object:id()) then
            -- warning("load:<%s>:server_object=NIL", self.object)
        -- else
            -- abort("load:SAVE_FILE_IS_CORRUPT:obj:<%s>", self.object)
        -- end
        -- self.loaded = false
        -- return
    -- end
    LOAD_OBJECT(self.object)
    event("mob_load"):trigger{obj=self.object,obj_id=self.object:id(),packet=reader,is_monster=true}
end
----------------------------------------------------------------------------------------------------------------------